// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ
const https = require('https');

const makeRequest = (path) => {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'nauchi.onrender.com',
      port: 443,
      path: path,
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      }
    };

    const req = https.request(options, (res) => {
      let data = '';
      res.on('data', chunk => data += chunk);
      res.on('end', () => {
        try {
          resolve({ status: res.statusCode, data: JSON.parse(data) });
        } catch (e) {
          resolve({ status: res.statusCode, data: data });
        }
      });
    });

    req.on('error', reject);
    req.end();
  });
};

const checkTeachers = async () => {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ...\n');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const usersResponse = await makeRequest('/api/users');
    
    if (usersResponse.status === 200) {
      const users = Array.isArray(usersResponse.data) ? usersResponse.data : [];
      console.log(`üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);
      
      // –ò—â–µ–º —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤
      const teachers = users.filter(user => user.role === 'teacher');
      console.log(`üë®‚Äçüè´ –†–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤: ${teachers.length}`);
      
      if (teachers.length > 0) {
        console.log('\nüìã –°–ø–∏—Å–æ–∫ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤:');
        teachers.forEach((teacher, index) => {
          console.log(`${index + 1}. ${teacher.name || 'N/A'} (${teacher.email || 'N/A'}) - ID: ${teacher.id}`);
        });
      } else {
        console.log('\n‚ùå –†–µ–ø–µ—Ç–∏—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
        console.log('üí° –ù—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ');
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      console.log('\nüë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:');
      users.forEach((user, index) => {
        console.log(`${index + 1}. ${user.name || 'N/A'} (${user.email || 'N/A'}) - –†–æ–ª—å: ${user.role || 'N/A'}`);
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ—Ç—ã –≤—Ä–µ–º–µ–Ω–∏
    const slotsResponse = await makeRequest('/api/time-slots');
    if (slotsResponse.status === 200) {
      const slots = Array.isArray(slotsResponse.data) ? slotsResponse.data : [];
      console.log(`\n‚è∞ –°–ª–æ—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–∏: ${slots.length}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ —É—á–∏—Ç–µ–ª–µ–π
    const profilesResponse = await makeRequest('/api/teacher-profiles');
    if (profilesResponse.status === 200) {
      const profiles = Array.isArray(profilesResponse.data) ? profilesResponse.data : [];
      console.log(`üë®‚Äçüè´ –ü—Ä–æ—Ñ–∏–ª–µ–π —É—á–∏—Ç–µ–ª–µ–π: ${profiles.length}`);
    }
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }
};

checkTeachers();
