#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏ —á–∞—Ç–æ–≤
 */

const { io } = require('socket.io-client');

const SERVER_URL = 'http://localhost:3001';

console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏ —á–∞—Ç–æ–≤...');

// –°–æ–∑–¥–∞–µ–º –¥–≤–∞ –∫–ª–∏–µ–Ω—Ç–∞ - —É—á–µ–Ω–∏–∫ –∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä
const studentSocket = io(SERVER_URL);
const teacherSocket = io(SERVER_URL);

let studentConnected = false;
let teacherConnected = false;
let chatCreated = false;
let messageReceived = false;

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const studentId = 'test_student_restored';
const teacherId = 'test_teacher_restored';
const studentName = '–¢–µ—Å—Ç–æ–≤—ã–π –£—á–µ–Ω–∏–∫ (–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ)';
const teacherName = '–¢–µ—Å—Ç–æ–≤—ã–π –†–µ–ø–µ—Ç–∏—Ç–æ—Ä (–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ)';

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É—á–µ–Ω–∏–∫–∞
studentSocket.on('connect', () => {
  console.log('‚úÖ –£—á–µ–Ω–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω');
  studentConnected = true;
  
  if (teacherConnected) {
    testChatFlow();
  }
});

studentSocket.on('chatCreated', (chat) => {
  console.log('‚úÖ –£—á–µ–Ω–∏–∫ –ø–æ–ª—É—á–∏–ª —Å–æ–±—ã—Ç–∏–µ chatCreated:', chat.id);
  chatCreated = true;
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
  const message = {
    id: `msg_${Date.now()}`,
    senderId: studentId,
    senderName: studentName,
    receiverId: teacherId,
    receiverName: teacherName,
    content: '–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏.',
    timestamp: new Date().toISOString(),
    isRead: false
  };
  
  console.log('üì§ –£—á–µ–Ω–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ...');
  studentSocket.emit('sendMessage', { chatId: chat.id, message });
});

studentSocket.on('receiveMessage', (data) => {
  console.log('‚úÖ –£—á–µ–Ω–∏–∫ –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ:', data.message.content);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
teacherSocket.on('connect', () => {
  console.log('‚úÖ –†–µ–ø–µ—Ç–∏—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω');
  teacherConnected = true;
  
  if (studentConnected) {
    testChatFlow();
  }
});

teacherSocket.on('chatCreated', (chat) => {
  console.log('‚úÖ –†–µ–ø–µ—Ç–∏—Ç–æ—Ä –ø–æ–ª—É—á–∏–ª —Å–æ–±—ã—Ç–∏–µ chatCreated:', chat.id);
  chatCreated = true;
});

teacherSocket.on('receiveMessage', (data) => {
  console.log('‚úÖ –†–µ–ø–µ—Ç–∏—Ç–æ—Ä –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ:', data.message.content);
  messageReceived = true;
  
  // –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ
  console.log('\nüéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û!');
  console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç');
  console.log('‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç');
  console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç');
  
  // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  studentSocket.disconnect();
  teacherSocket.disconnect();
  process.exit(0);
});

function testChatFlow() {
  console.log('\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç...');
  
  // –°–æ–∑–¥–∞–µ–º —á–∞—Ç
  const newChat = {
    id: `chat_${Date.now()}_restored`,
    participants: [studentId, teacherId],
    participantNames: [studentName, teacherName],
    messages: []
  };
  
  console.log('üì§ –°–æ–∑–¥–∞–µ–º —á–∞—Ç...');
  studentSocket.emit('createChat', newChat);
}

// –¢–∞–π–º–∞—É—Ç –¥–ª—è —Ç–µ—Å—Ç–∞
setTimeout(() => {
  if (!chatCreated) {
    console.log('‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù: –ß–∞—Ç –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è');
  } else if (!messageReceived) {
    console.log('‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù: –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ');
  }
  
  studentSocket.disconnect();
  teacherSocket.disconnect();
  process.exit(1);
}, 10000);

console.log('‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤...');
