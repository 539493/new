const io = require('socket.io-client');

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const testData = {
  student: {
    id: 'student_test_001',
    name: '–¢–µ—Å—Ç–æ–≤—ã–π –£—á–µ–Ω–∏–∫',
    email: 'student@test.com'
  },
  teacher: {
    id: 'teacher_test_001', 
    name: '–¢–µ—Å—Ç–æ–≤—ã–π –†–µ–ø–µ—Ç–∏—Ç–æ—Ä',
    email: 'teacher@test.com'
  }
};

// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
const socket = io('http://localhost:3001');

console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...');

socket.on('connect', () => {
  console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É');
  
  // –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞
  console.log('\nüìù –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞ –º–µ–∂–¥—É —É—á–µ–Ω–∏–∫–æ–º –∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–º');
  
  const newChat = {
    id: `chat_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
    participants: [testData.student.id, testData.teacher.id],
    participantNames: [testData.student.name, testData.teacher.name],
    messages: []
  };
  
  console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º createChat:', newChat);
  socket.emit('createChat', newChat);
});

// –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞
socket.on('chatCreated', (chat) => {
  console.log('‚úÖ –ß–∞—Ç —Å–æ–∑–¥–∞–Ω:', chat);
  
  // –¢–µ—Å—Ç 2: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  console.log('\nüí¨ –¢–µ—Å—Ç 2: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è');
  
  const message = {
    id: `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
    senderId: testData.student.id,
    senderName: testData.student.name,
    content: '–ü—Ä–∏–≤–µ—Ç! –ú–æ–∂–µ—Ç–µ –ª–∏ –≤—ã –ø–æ–º–æ—á—å –º–Ω–µ —Å –º–∞—Ç–µ–º–∞—Ç–∏–∫–æ–π?',
    timestamp: new Date().toISOString(),
    isRead: false
  };
  
  console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ:', message);
  socket.emit('sendMessage', { chatId: chat.id, message });
});

// –°–ª—É—à–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
socket.on('receiveMessage', (data) => {
  console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ:', data);
  
  // –¢–µ—Å—Ç 3: –û—Ç–º–µ—Ç–∫–∞ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
  console.log('\nüëÅÔ∏è –¢–µ—Å—Ç 3: –û—Ç–º–µ—Ç–∫–∞ —á–∞—Ç–∞ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ');
  socket.emit('markChatAsRead', { chatId: data.chatId });
});

// –°–ª—É—à–∞–µ–º –æ—Ç–º–µ—Ç–∫—É –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
socket.on('chatMarkedAsRead', (data) => {
  console.log('‚úÖ –ß–∞—Ç –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π:', data);
  
  // –¢–µ—Å—Ç 4: –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞
  console.log('\nüì¶ –¢–µ—Å—Ç 4: –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞');
  socket.emit('archiveChat', { chatId: data.chatId });
});

// –°–ª—É—à–∞–µ–º –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ
socket.on('chatArchived', (data) => {
  console.log('‚úÖ –ß–∞—Ç –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω:', data);
  
  // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç
  console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
  setTimeout(() => {
    socket.disconnect();
    process.exit(0);
  }, 1000);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
socket.on('connect_error', (error) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error.message);
  process.exit(1);
});

socket.on('error', (error) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∫–µ—Ç–∞:', error);
});

// –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
setTimeout(() => {
  console.log('‚è∞ –¢–∞–π–º–∞—É—Ç —Ç–µ—Å—Ç–∞');
  socket.disconnect();
  process.exit(1);
}, 10000);
