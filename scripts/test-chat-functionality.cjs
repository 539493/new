const { io } = require('socket.io-client');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const SERVER_URL = 'http://localhost:3001';

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const testStudent = {
  id: 'test_student_chat_' + Date.now(),
  name: '–¢–µ—Å—Ç–æ–≤—ã–π –£—á–µ–Ω–∏–∫',
  role: 'student'
};

const testTeacher = {
  id: 'test_teacher_chat_' + Date.now(),
  name: '–¢–µ—Å—Ç–æ–≤—ã–π –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å',
  role: 'teacher'
};

let studentSocket = null;
let teacherSocket = null;
let chatCreated = false;
let messageReceived = false;

console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —á–∞—Ç–æ–≤...');
console.log('üìã –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:');
console.log('- –£—á–µ–Ω–∏–∫:', testStudent);
console.log('- –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:', testTeacher);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞
function connectStudent() {
  return new Promise((resolve, reject) => {
    console.log('üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º —É—á–µ–Ω–∏–∫–∞...');
    
    studentSocket = io(SERVER_URL, {
      transports: ['websocket', 'polling'],
      timeout: 10000
    });

    studentSocket.on('connect', () => {
      console.log('‚úÖ –£—á–µ–Ω–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω:', studentSocket.id);
      resolve();
    });

    studentSocket.on('connect_error', (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞:', error);
      reject(error);
    });

    studentSocket.on('disconnect', () => {
      console.log('üîå –£—á–µ–Ω–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω');
    });
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
function connectTeacher() {
  return new Promise((resolve, reject) => {
    console.log('üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è...');
    
    teacherSocket = io(SERVER_URL, {
      transports: ['websocket', 'polling'],
      timeout: 10000
    });

    teacherSocket.on('connect', () => {
      console.log('‚úÖ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–µ–Ω:', teacherSocket.id);
      resolve();
    });

    teacherSocket.on('connect_error', (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:', error);
      reject(error);
    });

    teacherSocket.on('disconnect', () => {
      console.log('üîå –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–µ–Ω');
    });
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞
function createChat() {
  return new Promise((resolve, reject) => {
    console.log('üí¨ –°–æ–∑–¥–∞–µ–º —á–∞—Ç...');
    
    const newChat = {
      id: `test_chat_${Date.now()}`,
      participants: [testStudent.id, testTeacher.id],
      participantNames: [testStudent.name, testTeacher.name],
      messages: []
    };

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞ –æ—Ç —É—á–µ–Ω–∏–∫–∞
    studentSocket.emit('createChat', newChat);
    
    // –°–ª—É—à–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞
    studentSocket.on('chatCreated', (chat) => {
      console.log('‚úÖ –ß–∞—Ç —Å–æ–∑–¥–∞–Ω:', chat.id);
      chatCreated = true;
      resolve(chat);
    });

    teacherSocket.on('chatCreated', (chat) => {
      console.log('‚úÖ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —á–∞—Ç–µ:', chat.id);
    });

    // –¢–∞–π–º–∞—É—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞
    setTimeout(() => {
      if (!chatCreated) {
        reject(new Error('–¢–∞–π–º–∞—É—Ç —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞'));
      }
    }, 5000);
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
function sendMessage(chat) {
  return new Promise((resolve, reject) => {
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ...');
    
    const message = {
      id: `test_msg_${Date.now()}`,
      senderId: testStudent.id,
      senderName: testStudent.name,
      receiverId: testTeacher.id,
      receiverName: testTeacher.name,
      content: '–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.',
      timestamp: new Date().toISOString(),
      isRead: false
    };

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    studentSocket.emit('sendMessage', { chatId: chat.id, message });
    
    // –°–ª—É—à–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    teacherSocket.on('receiveMessage', (data) => {
      console.log('‚úÖ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ:', data.message.content);
      messageReceived = true;
      resolve(data);
    });

    studentSocket.on('receiveMessage', (data) => {
      console.log('‚úÖ –£—á–µ–Ω–∏–∫ –ø–æ–ª—É—á–∏–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', data.message.content);
    });

    // –¢–∞–π–º–∞—É—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    setTimeout(() => {
      if (!messageReceived) {
        reject(new Error('–¢–∞–π–º–∞—É—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è'));
      }
    }, 5000);
  });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runTest() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...');
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await connectStudent();
    await connectTeacher();
    
    // –°–æ–∑–¥–∞–µ–º —á–∞—Ç
    const chat = await createChat();
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await sendMessage(chat);
    
    console.log('üéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û!');
    console.log('‚úÖ –ß–∞—Ç —Å–æ–∑–¥–∞–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è');
    
  } catch (error) {
    console.error('‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù:', error.message);
  } finally {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    if (studentSocket) {
      studentSocket.disconnect();
    }
    if (teacherSocket) {
      teacherSocket.disconnect();
    }
    
    console.log('üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    process.exit(0);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
runTest();
