#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
 */

const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));

const SERVER_URL = process.env.SERVER_URL || 'http://localhost:3001';

async function createTestTeacher() {
  console.log('üë®‚Äçüè´ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è...');
  console.log(`üåê –°–µ—Ä–≤–µ—Ä: ${SERVER_URL}`);

  const timestamp = Date.now();
  const testTeacher = {
    email: `test.teacher.${timestamp}@example.com`,
    password: 'password123',
    name: `–¢–µ—Å—Ç –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å ${timestamp}`,
    nickname: `test_teacher_${timestamp}`,
    role: 'teacher',
    phone: `+7900${Math.floor(Math.random() * 10000000).toString().padStart(7, '0')}`
  };

  console.log('üìù –î–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:');
  console.log(`   –ò–º—è: ${testTeacher.name}`);
  console.log(`   Email: ${testTeacher.email}`);
  console.log(`   –†–æ–ª—å: ${testTeacher.role}`);
  console.log(`   –¢–µ–ª–µ—Ñ–æ–Ω: ${testTeacher.phone}`);

  try {
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    console.log('\n1Ô∏è‚É£ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è...');
    const registerResponse = await fetch(`${SERVER_URL}/api/register`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(testTeacher)
    });

    if (!registerResponse.ok) {
      const errorData = await registerResponse.json();
      throw new Error(`–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${errorData.error}`);
    }

    const registerResult = await registerResponse.json();
    console.log('‚úÖ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', registerResult);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –ø–æ—è–≤–∏–ª—Å—è –≤ /api/teachers
    console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—è–≤–ª–µ–Ω–∏—è –≤ /api/teachers...');
    const teachersResponse = await fetch(`${SERVER_URL}/api/teachers`);
    if (!teachersResponse.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π: ${teachersResponse.status}`);
    }
    const teachers = await teachersResponse.json();
    console.log(`üìä –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –≤ /api/teachers: ${teachers.length}`);
    
    const foundTeacher = teachers.find(t => t.id === registerResult.id);
    if (foundTeacher) {
      console.log('‚úÖ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ /api/teachers');
    } else {
      console.log('‚ùå –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –ù–ï –Ω–∞–π–¥–µ–Ω –≤ /api/teachers');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –ø–æ—è–≤–∏–ª—Å—è –≤ /api/users
    console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—è–≤–ª–µ–Ω–∏—è –≤ /api/users...');
    const usersResponse = await fetch(`${SERVER_URL}/api/users`);
    if (!usersResponse.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${usersResponse.status}`);
    }
    const users = await usersResponse.json();
    const teacherUsers = users.filter(u => u.role === 'teacher');
    console.log(`üìä –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –≤ /api/users: ${teacherUsers.length}`);
    
    const foundUser = teacherUsers.find(u => u.id === registerResult.id);
    if (foundUser) {
      console.log('‚úÖ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ /api/users');
    } else {
      console.log('‚ùå –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –ù–ï –Ω–∞–π–¥–µ–Ω –≤ /api/users');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    console.log('\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...');
    const syncResponse = await fetch(`${SERVER_URL}/api/sync`);
    if (!syncResponse.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${syncResponse.status}`);
    }
    const syncData = await syncResponse.json();
    
    const teacherProfilesCount = Object.keys(syncData.teacherProfiles || {}).length;
    console.log(`üìä –ü—Ä–æ—Ñ–∏–ª–µ–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –≤ /api/sync: ${teacherProfilesCount}`);
    
    const foundProfile = syncData.teacherProfiles && syncData.teacherProfiles[registerResult.id];
    if (foundProfile) {
      console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –Ω–∞–π–¥–µ–Ω –≤ /api/sync');
    } else {
      console.log('‚ùå –ü—Ä–æ—Ñ–∏–ª—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ù–ï –Ω–∞–π–¥–µ–Ω –≤ /api/sync');
    }

    console.log('\nüéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
    console.log('\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
    console.log(`   ‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ‚úÖ`);
    console.log(`   ‚Ä¢ –í /api/teachers: ${foundTeacher ? '‚úÖ' : '‚ùå'}`);
    console.log(`   ‚Ä¢ –í /api/users: ${foundUser ? '‚úÖ' : '‚ùå'}`);
    console.log(`   ‚Ä¢ –í /api/sync: ${foundProfile ? '‚úÖ' : '‚ùå'}`);

    if (foundTeacher && foundUser && foundProfile) {
      console.log('\n‚úÖ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ!');
    } else {
      console.log('\n‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
createTestTeacher();
