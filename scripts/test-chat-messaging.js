#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã —á–∞—Ç–æ–≤
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
 */

const io = require('socket.io-client');

const SERVER_URL = process.env.SERVER_URL || 'http://localhost:3000';

console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —á–∞—Ç–æ–≤...');
console.log(`üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É: ${SERVER_URL}`);

// –°–æ–∑–¥–∞–µ–º –¥–≤–∞ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const client1 = io(SERVER_URL);
const client2 = io(SERVER_URL);

let testResults = {
  connection: false,
  chatCreation: false,
  messageSending: false,
  messageReceiving: false,
  notifications: false
};

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const testUser1 = {
  id: 'test_user_1',
  name: '–¢–µ—Å—Ç–æ–≤—ã–π –£—á–µ–Ω–∏–∫',
  role: 'student'
};

const testUser2 = {
  id: 'test_user_2', 
  name: '–¢–µ—Å—Ç–æ–≤—ã–π –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å',
  role: 'teacher'
};

let testChatId = null;
let testMessageId = null;

// –¢–µ—Å—Ç 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É
client1.on('connect', () => {
  console.log('‚úÖ –ö–ª–∏–µ–Ω—Ç 1 –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É');
  testResults.connection = true;
  
  // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  client1.emit('joinNotifications', { userId: testUser1.id });
});

client2.on('connect', () => {
  console.log('‚úÖ –ö–ª–∏–µ–Ω—Ç 2 –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É');
  
  // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  client2.emit('joinNotifications', { userId: testUser2.id });
  
  // –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ–±–æ–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
  setTimeout(() => {
    testChatCreation();
  }, 1000);
});

// –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞
function testChatCreation() {
  console.log('üß™ –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞...');
  
  const newChat = {
    id: `test_chat_${Date.now()}`,
    participants: [testUser1.id, testUser2.id],
    participantNames: [testUser1.name, testUser2.name],
    messages: []
  };
  
  client1.emit('createChat', newChat);
  testChatId = newChat.id;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞
client1.on('chatCreated', (chat) => {
  console.log('‚úÖ –ß–∞—Ç —Å–æ–∑–¥–∞–Ω:', chat.id);
  testResults.chatCreation = true;
  
  // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ç–µ—Å—Ç—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
  setTimeout(() => {
    testMessageSending();
  }, 1000);
});

client2.on('chatCreated', (chat) => {
  console.log('‚úÖ –ö–ª–∏–µ–Ω—Ç 2 –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞—Ç–∞:', chat.id);
});

// –¢–µ—Å—Ç 3: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
function testMessageSending() {
  console.log('üß™ –¢–µ—Å—Ç 3: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è...');
  
  const testMessage = {
    id: `test_msg_${Date.now()}`,
    senderId: testUser1.id,
    senderName: testUser1.name,
    receiverId: testUser2.id,
    receiverName: testUser2.name,
    content: '–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.',
    timestamp: new Date().toISOString(),
    isRead: false
  };
  
  client1.emit('sendMessage', { 
    chatId: testChatId, 
    message: testMessage 
  });
  
  testMessageId = testMessage.id;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
client1.on('receiveMessage', (data) => {
  console.log('‚úÖ –ö–ª–∏–µ–Ω—Ç 1 –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ:', data.message.content);
  testResults.messageSending = true;
});

client2.on('receiveMessage', (data) => {
  console.log('‚úÖ –ö–ª–∏–µ–Ω—Ç 2 –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ:', data.message.content);
  testResults.messageReceiving = true;
  
  // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ç–µ—Å—Ç—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  setTimeout(() => {
    testNotifications();
  }, 1000);
});

// –¢–µ—Å—Ç 4: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function testNotifications() {
  console.log('üß™ –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');
  
  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  setTimeout(() => {
    checkTestResults();
  }, 2000);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
client2.on('newNotification', (notification) => {
  console.log('‚úÖ –ö–ª–∏–µ–Ω—Ç 2 –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', notification.title);
  testResults.notifications = true;
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function checkTestResults() {
  console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
  console.log('================================');
  console.log(`–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É: ${testResults.connection ? '‚úÖ' : '‚ùå'}`);
  console.log(`–°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞: ${testResults.chatCreation ? '‚úÖ' : '‚ùå'}`);
  console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: ${testResults.messageSending ? '‚úÖ' : '‚ùå'}`);
  console.log(`–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ${testResults.messageReceiving ? '‚úÖ' : '‚ùå'}`);
  console.log(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${testResults.notifications ? '‚úÖ' : '‚ùå'}`);
  
  const allTestsPassed = Object.values(testResults).every(result => result === true);
  
  if (allTestsPassed) {
    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ —á–∞—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
  } else {
    console.log('\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã');
    console.log('üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞');
  }
  
  // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  client1.disconnect();
  client2.disconnect();
  
  process.exit(allTestsPassed ? 0 : 1);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
client1.on('connect_error', (error) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ 1:', error.message);
  process.exit(1);
});

client2.on('connect_error', (error) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ 2:', error.message);
  process.exit(1);
});

// –¢–∞–π–º–∞—É—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
setTimeout(() => {
  console.log('\n‚è∞ –¢–∞–π–º–∞—É—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
  checkTestResults();
}, 30000);
