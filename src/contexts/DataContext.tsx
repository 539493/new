import React, { createContext, useContext, useState, useEffect, useRef, ReactNode } from 'react';
import { TimeSlot, Lesson, Chat, FilterOptions, User, Post, Comment, StudentProfile, TeacherProfile, Notification, SearchFilters } from '../types';
import { io, Socket } from 'socket.io-client';
import { SERVER_URL, SOCKET_CONFIG } from '../config';
import { useAuth } from './AuthContext';

// –¢–∏–ø–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
interface DataContextType {
  timeSlots: TimeSlot[];
  lessons: Lesson[];
  chats: Chat[];
  posts: Post[];
  notifications: Notification[];
  createTimeSlot: (slot: Omit<TimeSlot, 'id'>) => void;
  bookLesson: (slotId: string, studentId: string, studentName: string, comment?: string) => void;
  cancelLesson: (lessonId: string) => void;
  rescheduleLesson: (lessonId: string, newDate: string, newStartTime: string) => void;
  getFilteredSlots: (filters: FilterOptions) => TimeSlot[];
  sendMessage: (chatId: string, senderId: string, senderName: string, content: string) => void;
  sendMessageToUser: (senderId: string, senderName: string, receiverId: string, receiverName: string, content: string) => string;
  getOrCreateChat: (participant1Id: string, participant2Id: string, participant1Name: string, participant2Name: string) => string;
  clearAllData: () => void;
  isConnected: boolean;
  completeLesson: (lessonId: string) => void;
  studentProfiles: Record<string, StudentProfile>;
  teacherProfiles: Record<string, TeacherProfile>;
  updateStudentProfile: (studentId: string, profile: StudentProfile) => void;
  deleteSlot: (slotId: string) => void;
  createSlot: (slot: Omit<TimeSlot, 'id' | 'isBooked'>, studentId?: string, studentName?: string, options?: { mode?: string }) => Promise<TimeSlot>;
  allUsers: User[];
  setAllUsers: (users: User[]) => void;
  refreshUsers: () => void; // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  loadRegisteredTeachers: () => Promise<any[]>; // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞)
  refreshAllData: () => void; // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
  forceSyncData: () => Promise<void>; // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º
  uploadLocalDataToServer: () => Promise<any>; // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  deleteUser: (userId: string) => Promise<boolean>; // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  updateTeacherProfile: (teacherId: string, profile: TeacherProfile) => void;
  socketRef: React.MutableRefObject<Socket | null>;
  loadInitialData: () => void;
  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–ø–∏—Å—è–º–∏
  createPost: (postData: { text: string; media: File[]; type: 'text' | 'image' | 'video' }) => void;
  addReaction: (postId: string, reactionType: string) => void;
  addComment: (postId: string, commentText: string) => void;
  sharePost: (postId: string) => void;
  bookmarkPost: (postId: string) => void;
  editPost: (postId: string, newText: string) => void;
  deletePost: (postId: string) => void;
  // –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ—Å—Ç–æ–≤
  searchPosts: (filters: SearchFilters) => void;
  getPostsByUser: (userId: string) => Post[];
  getBookmarkedPosts: (userId: string) => Post[];
  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  subscribeToNotifications: (userId: string) => void;
  unsubscribeFromNotifications: (userId: string) => void;
  markNotificationAsRead: (notificationId: string) => void;
  markAllNotificationsAsRead: (userId: string) => void;
  deleteNotification: (notificationId: string) => void;
  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞–º–∏
  deleteChat: (chatId: string) => void;
  markChatAsRead: (chatId: string) => void;
  clearChatMessages: (chatId: string) => void;
  archiveChat: (chatId: string) => void;
  unarchiveChat: (chatId: string) => void;
  loadChatsFromServer: () => Promise<void>;
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  deleteUserData: (userId: string) => void;
}

export const DataContext = createContext<DataContextType | undefined>(undefined);

export const useData = () => {
  const ctx = useContext(DataContext);
  if (!ctx) throw new Error('useData must be used within a DataProvider');
  return ctx;
};

interface DataProviderProps {
  children: ReactNode;
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å localStorage
const loadFromStorage = (key: string, defaultValue: any) => {
  try {
    const saved = localStorage.getItem(key);
    if (saved) {
      const parsed = JSON.parse(saved);
      return Array.isArray(parsed) ? parsed : defaultValue;
    }
  } catch (e) {
    // Error loading from localStorage
  }
  return defaultValue;
};

const saveToStorage = (key: string, data: any) => {
  try {
    localStorage.setItem(key, JSON.stringify(data));
    // Saved to localStorage
  } catch (e) {
    // Error saving to localStorage
  }
};

// –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞
const getInitialData = () => {
  const today = new Date();
  const tomorrow = new Date(today);
  tomorrow.setDate(tomorrow.getDate() + 1);
  const dayAfterTomorrow = new Date(today);
  dayAfterTomorrow.setDate(dayAfterTomorrow.getDate() + 2);
  const nextWeek = new Date(today);
  nextWeek.setDate(nextWeek.getDate() + 7);

  return {
    timeSlots: [],
    lessons: [],
    chats: [],
    studentProfiles: {},
    teacherProfiles: {}
  };
};

export const DataProvider: React.FC<DataProviderProps> = ({ children }) => {
  // WebSocket —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  const socketRef = useRef<Socket | null>(null);
  const [isConnected, setIsConnected] = useState(true);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ localStorage –∏–ª–∏ –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
  const [timeSlots, setTimeSlots] = useState<TimeSlot[]>(() => {
    const saved = loadFromStorage('tutoring_timeSlots', []);
    if (saved.length > 0) {
      return saved;
    }
    // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ
    const initialData = getInitialData();
    saveToStorage('tutoring_timeSlots', initialData.timeSlots);
    return initialData.timeSlots;
  });

  const [lessons, setLessons] = useState<Lesson[]>(() => {
    return loadFromStorage('tutoring_lessons', []);
  });

  const [chats, setChats] = useState<Chat[]>(() => {
    return loadFromStorage('tutoring_chats', []);
  });

  const [studentProfiles, setStudentProfiles] = useState<Record<string, StudentProfile>>(() => {
    const saved = loadFromStorage('tutoring_studentProfiles', {});
    if (Object.keys(saved).length > 0) {
      return saved;
    }
    // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ
    const initialData = getInitialData();
    saveToStorage('tutoring_studentProfiles', initialData.studentProfiles);
    return initialData.studentProfiles;
  });

  const [teacherProfiles, setTeacherProfiles] = useState<Record<string, TeacherProfile>>(() => {
    const saved = loadFromStorage('tutoring_teacherProfiles', {});
    if (Object.keys(saved).length > 0) {
      console.log('üì± –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π:', Object.keys(saved).length);
      return saved;
    }
    // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ
    const initialData = getInitialData();
    saveToStorage('tutoring_teacherProfiles', initialData.teacherProfiles);
    return initialData.teacherProfiles;
  });

  const [allUsers, setAllUsers] = useState<User[]>(() => {
    try {
      const users = JSON.parse(localStorage.getItem('tutoring_users') || '[]');
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ localStorage –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', users.length);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞
      const registeredTeachers = JSON.parse(localStorage.getItem('tutoring_registeredTeachers') || '[]');
      console.log('üë®‚Äçüè´ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π (–ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö):', registeredTeachers.length);
      
      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏
      const allUsersCombined = [...users];
      registeredTeachers.forEach((teacher: any) => {
        const exists = allUsersCombined.find((u: any) => u.id === teacher.id);
        if (!exists) {
          allUsersCombined.push(teacher);
        }
      });
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –ª–æ–≥–∏—Ä—É–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
      const teachers = allUsersCombined.filter((u: any) => u.role === 'teacher');
      console.log('üë®‚Äçüè´ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π (–≤–∫–ª—é—á–∞—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö):', teachers.length, teachers.map((t: any) => ({ id: t.id, name: t.name })));
      
      return allUsersCombined;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ localStorage:', error);
      return [];
    }
  });

  const [posts, setPosts] = useState<Post[]>(() => {
    return loadFromStorage('tutoring_posts', []);
  });

  const [notifications, setNotifications] = useState<Notification[]>(() => {
    return loadFromStorage('tutoring_notifications', []);
  });

  const { user, updateProfile } = useAuth();

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const loadInitialData = () => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const savedTimeSlots = loadFromStorage('tutoring_timeSlots', []);
    const savedLessons = loadFromStorage('tutoring_lessons', []);
    const savedChats = loadFromStorage('tutoring_chats', []);
    const initialData = getInitialData();
    
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç–¥–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º —Å–ª–æ—Ç–∞–º, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const allTimeSlots = savedTimeSlots.length > 0 ? savedTimeSlots : initialData.timeSlots;
    
    // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ ID, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É –±–æ–ª–µ–µ –Ω–æ–≤—ã—Ö —Å–ª–æ—Ç–æ–≤
    const uniqueTimeSlots = allTimeSlots.filter((slot: TimeSlot, index: number, self: TimeSlot[]) => 
      index === self.findIndex((s: TimeSlot) => s.id === slot.id)
    );
    
    setTimeSlots(uniqueTimeSlots);
    setLessons(savedLessons);
    setChats(savedChats);
    setStudentProfiles(initialData.studentProfiles);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    saveToStorage('tutoring_timeSlots', uniqueTimeSlots);
    saveToStorage('tutoring_lessons', savedLessons);
    saveToStorage('tutoring_chats', savedChats);
    saveToStorage('tutoring_studentProfiles', initialData.studentProfiles);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —á–∞—Ç—ã —Å —Å–µ—Ä–≤–µ—Ä–∞
    loadChatsFromServer();
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å–µ—Ä–≤–µ—Ä–∞
  const loadUsersFromServer = async () => {
    try {
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å–µ—Ä–≤–µ—Ä–∞ Render...');
      const response = await fetch(`${SERVER_URL}/api/users`);
      
      if (!response.ok) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å–µ—Ä–≤–µ—Ä–∞:', response.status);
        return [];
      }
      
      const serverUsers = await response.json();
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞ Render:', serverUsers.length);
      
      // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
      const localUsers = JSON.parse(localStorage.getItem('tutoring_users') || '[]');
      console.log('üì± –õ–æ–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:', localUsers.length);
      
      const allUsers = [...localUsers, ...serverUsers];
      
      // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ ID, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const uniqueUsers = allUsers.filter((user, index, self) => 
        index === self.findIndex(u => u.id === user.id)
      );
      
      console.log('‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:', uniqueUsers.length);
      console.log('üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ (–≤–∫–ª—é—á–∞—è –æ—Ñ–ª–∞–π–Ω):', uniqueUsers.filter(u => u.role === 'teacher').length);
      console.log('üë®‚Äçüéì –°—Ç—É–¥–µ–Ω—Ç—ã:', uniqueUsers.filter(u => u.role === 'student').length);
      
      setAllUsers(uniqueUsers);
      localStorage.setItem('tutoring_users', JSON.stringify(uniqueUsers));
      return uniqueUsers;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å–µ—Ä–≤–µ—Ä–∞:', error);
      return [];
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —É—Ä–æ–∫–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞
  const loadLessonsFromServer = async () => {
    try {
      console.log('Loading lessons from server...');
      const response = await fetch(`${SERVER_URL}/api/lessons`);
      
      if (!response.ok) {
        console.error('Failed to load lessons from server:', response.status);
        return [];
      }
      
      const serverLessons = await response.json();
      console.log('Loaded lessons from server:', serverLessons.length, serverLessons);
      
      // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ —É—Ä–æ–∫–∞–º–∏
      const localLessons = JSON.parse(localStorage.getItem('tutoring_lessons') || '[]');
      console.log('Local lessons:', localLessons.length, localLessons);
      
      const allLessons = [...localLessons, ...serverLessons];
      
      // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ ID, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const uniqueLessons = allLessons.filter((lesson, index, self) => 
        index === self.findIndex(l => l.id === lesson.id)
      );
      
      console.log('Setting lessons in context:', uniqueLessons.length, uniqueLessons);
      setLessons(uniqueLessons);
      saveToStorage('tutoring_lessons', uniqueLessons);
      return uniqueLessons;
    } catch (error) {
      console.error('Error loading lessons from server:', error);
      return [];
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const refreshUsers = () => {
    try {
      console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
      const users = JSON.parse(localStorage.getItem('tutoring_users') || '[]');
      console.log('üë• –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ localStorage:', users.length);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞
      const registeredTeachers = JSON.parse(localStorage.getItem('tutoring_registeredTeachers') || '[]');
      console.log('üë®‚Äçüè´ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π (–ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö):', registeredTeachers.length);
      
      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏
      const allUsersCombined = [...users];
      registeredTeachers.forEach((teacher: any) => {
        const exists = allUsersCombined.find((u: any) => u.id === teacher.id);
        if (!exists) {
          allUsersCombined.push(teacher);
          console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:', teacher.name);
        } else {
          console.log('‚è≠Ô∏è –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', teacher.name);
        }
      });
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
      const teachers = allUsersCombined.filter((u: any) => u.role === 'teacher');
      console.log('üë®‚Äçüè´ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π (–≤–∫–ª—é—á–∞—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö):', teachers.length, teachers.map((t: any) => ({ id: t.id, name: t.name })));
      
      // –í–ê–ñ–ù–û: –ù–ï –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º allUsers, –µ—Å–ª–∏ –æ–Ω–∏ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –Ω—É–∂–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
      const currentUsers = allUsers || [];
      const currentTeachers = currentUsers.filter((u: any) => u.role === 'teacher');
      
      if (teachers.length > currentTeachers.length) {
        setAllUsers(allUsersCombined);
        console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π:', teachers.length - currentTeachers.length);
      } else {
        console.log('‚è≠Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
      }
      
      // –¢–∞–∫–∂–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º teacherProfiles –∏–∑ localStorage
      const teacherProfilesData = JSON.parse(localStorage.getItem('tutoring_teacherProfiles') || '{}');
      console.log('üì± –û–±–Ω–æ–≤–ª—è–µ–º teacherProfiles –∏–∑ localStorage:', Object.keys(teacherProfilesData).length);
      setTeacherProfiles(teacherProfilesData);
      
      console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
      // –ù–ï –æ—á–∏—â–∞–µ–º allUsers –ø—Ä–∏ –æ—à–∏–±–∫–µ - —ç—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ø–æ—Ç–µ—Ä–µ –¥–∞–Ω–Ω—ã—Ö
      console.log('‚ö†Ô∏è –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ –æ—à–∏–±–∫–µ');
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞)
  const loadRegisteredTeachers = async () => {
    try {
      console.log('üë®‚Äçüè´ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π...');
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–∞ Render
      try {
        await loadUsersFromServer();
      } catch (serverError) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', serverError);
      }
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ localStorage (–≤–∫–ª—é—á–∞—è –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞)
      const users = JSON.parse(localStorage.getItem('tutoring_users') || '[]');
      const teachers = users.filter((u: any) => u.role === 'teacher');
      
      console.log('üì± –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π (–≤–∫–ª—é—á–∞—è –æ—Ñ–ª–∞–π–Ω):', teachers.length);
      teachers.forEach((teacher: any) => {
        console.log(`  - ${teacher.name} (${teacher.email}) - ID: ${teacher.id} - –°—Ç–∞—Ç—É—Å: –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω`);
      });
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –∫–ª—é—á–µ
      const registeredTeachers = teachers.map(teacher => ({
        ...teacher,
        isRegistered: true,
        isOnline: false, // –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞
        lastSeen: new Date().toISOString()
      }));
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –∫–ª—é—á–µ –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
      localStorage.setItem('tutoring_registeredTeachers', JSON.stringify(registeredTeachers));
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setAllUsers(users);
      
      // –¢–∞–∫–∂–µ –∑–∞–≥—Ä—É–∂–∞–µ–º teacherProfiles
      const teacherProfilesData = JSON.parse(localStorage.getItem('tutoring_teacherProfiles') || '{}');
      setTeacherProfiles(teacherProfilesData);
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤...');
      
      console.log('‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞)');
      return teachers;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π:', error);
      return [];
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
  const refreshAllData = () => {
    console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö...');
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞)
    loadRegisteredTeachers().catch(console.error);
    // –ó–∞—Ç–µ–º –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    refreshUsers();
    // –ó–∞—Ç–µ–º –∑–∞–≥—Ä—É–∂–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ)
    loadUsersFromServer().catch(console.error);
    loadLessonsFromServer().catch(console.error);
    
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Å–µ —Å–ª–æ—Ç—ã –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å–µ—Ä–≤–µ—Ä–∞
    if (socketRef.current && isConnected) {
      socketRef.current.emit('requestAllSlots');
      socketRef.current.emit('requestAllUsers');
    }
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å —Å–µ—Ä–≤–µ—Ä–æ–º (–≤–∫–ª—é—á–∞—è —Å–ª–æ—Ç—ã)
    forceSyncData().catch(error => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    });
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
  const forceSyncData = async () => {
    try {
      console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞...');
      
      // –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      await loadUsersFromServer();
      
      const response = await fetch(`${SERVER_URL}/api/sync`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
        // –î–æ–±–∞–≤–ª—è–µ–º timeout –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        signal: AbortSignal.timeout(10000) // 10 —Å–µ–∫—É–Ω–¥ timeout
      });
      
      if (!response.ok) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞:', response.status, response.statusText);
        // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        return;
      }
      
      const contentType = response.headers.get('content-type');
      if (!contentType || !contentType.includes('application/json')) {
        console.warn('‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ-JSON –æ—Ç–≤–µ—Ç:', contentType);
        return;
      }
      
      const syncData = await response.json();
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã:', Object.keys(syncData));
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ—Ç—ã
      if (syncData.timeSlots) {
        setTimeSlots(syncData.timeSlots);
        saveToStorage('tutoring_timeSlots', syncData.timeSlots);
        console.log('‚úÖ –°–ª–æ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', syncData.timeSlots.length);
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–∫–∏
      if (syncData.lessons) {
        setLessons(syncData.lessons);
        saveToStorage('tutoring_lessons', syncData.lessons);
        console.log('‚úÖ –£—Ä–æ–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', syncData.lessons.length);
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —á–∞—Ç—ã
      if (syncData.chats) {
        setChats(syncData.chats);
        saveToStorage('tutoring_chats', syncData.chats);
        console.log('‚úÖ –ß–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', syncData.chats.length);
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å—Ç—ã
      if (syncData.posts) {
        setPosts(syncData.posts);
        saveToStorage('tutoring_posts', syncData.posts);
        console.log('‚úÖ –ü–æ—Å—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', syncData.posts.length);
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const users: User[] = [];
      if (syncData.teacherProfiles) {
        console.log('üë®‚Äçüè´ –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π:', Object.keys(syncData.teacherProfiles).length);
        Object.entries(syncData.teacherProfiles).forEach(([id, profile]) => {
          const teacherProfile = profile as TeacherProfile;
          const user = {
            id,
            email: String(teacherProfile.email || ''),
            name: String(teacherProfile.name || ''),
            nickname: String(teacherProfile.nickname || ''),
            role: 'teacher' as const,
            phone: String(teacherProfile.phone || ''),
            profile: teacherProfile
          };
          users.push(user);
          console.log('üë®‚Äçüè´ –î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:', user.id, user.name, user.email);
        });
      }
      if (syncData.studentProfiles) {
        Object.entries(syncData.studentProfiles).forEach(([id, profile]) => {
          const studentProfile = profile as StudentProfile;
          users.push({
            id,
            email: String(studentProfile.email || ''),
            name: String(studentProfile.name || ''),
            nickname: String(studentProfile.nickname || ''),
            role: 'student' as const,
            phone: String(studentProfile.phone || ''),
            profile: studentProfile
          });
        });
      }
      setAllUsers(users);
      saveToStorage('tutoring_users', users);
      
      console.log('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      console.log('üìä –ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:');
      console.log('- –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', users.length);
      console.log('- –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π:', users.filter(u => u.role === 'teacher').length);
      console.log('- –°—Ç—É–¥–µ–Ω—Ç–æ–≤:', users.filter(u => u.role === 'student').length);
      console.log('- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:', users);
    } catch (error) {
      console.warn('Error syncing data (continuing with local data):', error);
      // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  const uploadLocalDataToServer = async () => {
    try {
      console.log('üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');
      
      // –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      const localTeacherProfiles = JSON.parse(localStorage.getItem('tutoring_teacherProfiles') || '{}');
      const localStudentProfiles = JSON.parse(localStorage.getItem('tutoring_studentProfiles') || '{}');
      const localUsers = JSON.parse(localStorage.getItem('tutoring_users') || '[]');
      
      console.log('üìä –õ–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:');
      console.log(`   üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏: ${Object.keys(localTeacherProfiles).length}`);
      console.log(`   üë®‚Äçüéì –°—Ç—É–¥–µ–Ω—Ç—ã: ${Object.keys(localStudentProfiles).length}`);
      console.log(`   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${localUsers.length}`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      const response = await fetch(`${SERVER_URL}/api/upload-local-data`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          teacherProfiles: localTeacherProfiles,
          studentProfiles: localStudentProfiles,
          users: localUsers
        })
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
      }
      
      const result = await response.json();
      console.log('‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', result);
      
      // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
      await forceSyncData();
      
      return result;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', error);
      throw error;
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const deleteUser = async (userId: string): Promise<boolean> => {
    try {
      console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      const response = await fetch(`${SERVER_URL}/api/users/${userId}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
        }
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      }
      
      const result = await response.json();
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω:', result);
      
      // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      setAllUsers(prev => {
        const updated = prev.filter(user => user.id !== userId);
        saveToStorage('tutoring_users', updated);
        return updated;
      });
      
      // –£–¥–∞–ª—è–µ–º –∏–∑ –ø—Ä–æ—Ñ–∏–ª–µ–π
      setTeacherProfiles(prev => {
        const updated = { ...prev };
        delete updated[userId];
        saveToStorage('tutoring_teacherProfiles', updated);
        return updated;
      });
      
      setStudentProfiles(prev => {
        const updated = { ...prev };
        delete updated[userId];
        saveToStorage('tutoring_studentProfiles', updated);
        return updated;
      });
      
      // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      setTimeSlots(prev => prev.filter(slot => slot.teacherId !== userId));
      setLessons(prev => prev.filter(lesson => 
        lesson.teacherId !== userId && lesson.studentId !== userId
      ));
      setChats(prev => prev.filter(chat => 
        !chat.participants.includes(userId)
      ));
      setPosts(prev => prev.filter(post => post.userId !== userId));
      setNotifications(prev => prev.filter(notification => 
        notification.userId !== userId
      ));
      
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      return false;
    }
  };

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  useEffect(() => {
    // –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –∏—Ö –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –∑–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤...');
    loadRegisteredTeachers();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
    const checkServerAvailability = async () => {
      try {
        const response = await fetch(`${SERVER_URL}/api/health`, { 
          method: 'GET',
          signal: AbortSignal.timeout(5000) // 5 —Å–µ–∫—É–Ω–¥ timeout
        });
        if (response.ok) {
          const healthData = await response.json();
          console.log('Server health check passed:', healthData);
          return true;
        }
        return false;
      } catch (error) {
        console.warn('Server not available, working in offline mode:', error);
        return false;
      }
    };

    const initializeConnection = async () => {
      const serverAvailable = await checkServerAvailability();
      
      if (!serverAvailable) {
        console.log('Server not available, loading local data only');
        loadInitialData();
        loadLessonsFromServer();
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤ –¥–∞–∂–µ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞
        loadRegisteredTeachers().catch(console.error);
        return;
      }

      console.log('Server is available, initializing Socket.IO connection...');
    
    const newSocket = io(SERVER_URL, {
      ...SOCKET_CONFIG,
      reconnection: true,
        reconnectionAttempts: 3,
        reconnectionDelay: 2000,
        timeout: 10000,
    });

    socketRef.current = newSocket;

    newSocket.on('connect', () => {
      setIsConnected(true);
        console.log('‚úÖ Connected to server via Socket.IO');
        console.log(`üåê Server URL: ${SERVER_URL}`);
        console.log(`üîå Socket ID: ${newSocket.id}`);
        
        // –ü—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        console.log('üîÑ –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ - –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ...');
        refreshAllData();
      
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Å–ª–æ—Ç—ã —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      const localSlots = loadFromStorage('tutoring_timeSlots', []);
      if (localSlots.length > 0) {
        localSlots.forEach((slot: TimeSlot) => {
          if (socketRef.current) {
            socketRef.current.emit('createSlot', slot);
          }
        });
      }

        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if (socketRef.current) {
          socketRef.current.emit('requestAllPosts');
          if (user) {
            socketRef.current.emit('requestUserNotifications', user.id);
            socketRef.current.emit('subscribeNotifications', user.id);
          }
        }
    });

    newSocket.on('disconnect', () => {
      // setIsConnected(false); // –í—Å–µ–≥–¥–∞ –æ–Ω–ª–∞–π–Ω
        console.log('üîå Disconnected from server');
      });

      newSocket.on('reconnect', (attemptNumber) => {
        setIsConnected(true);
        console.log(`üîÑ Reconnected to server after ${attemptNumber} attempts`);
        
        // –ü—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        console.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è - –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ...');
        refreshAllData();
      });

      newSocket.on('reconnect_attempt', (attemptNumber) => {
        console.log(`üîÑ Reconnection attempt ${attemptNumber}`);
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    newSocket.on('connect_error', (error) => {
      // setIsConnected(false); // –í—Å–µ–≥–¥–∞ –æ–Ω–ª–∞–π–Ω
        console.warn('‚ùå Socket.IO connection error:', error);
        console.warn('üîß Working in offline mode until reconnection...');
      
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      loadInitialData();
        loadLessonsFromServer();
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        loadRegisteredTeachers().catch(console.error);
    });

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
    newSocket.on('initialData', (data: { timeSlots: TimeSlot[]; lessons: Lesson[]; chats: Chat[] }) => {
      
      // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏
      const currentTimeSlots = loadFromStorage('tutoring_timeSlots', []);
      const allTimeSlots = [...currentTimeSlots, ...data.timeSlots];
      
      // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ ID, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const uniqueTimeSlots = allTimeSlots.filter((slot: TimeSlot, index: number, self: TimeSlot[]) => 
        index === self.findIndex((s: TimeSlot) => s.id === slot.id)
      );
      
      setTimeSlots(uniqueTimeSlots);
      setLessons(data.lessons);
      saveToStorage('tutoring_timeSlots', uniqueTimeSlots);
      saveToStorage('tutoring_lessons', data.lessons);
      if (data.chats) {
        setChats(data.chats);
        saveToStorage('tutoring_chats', data.chats);
      }
    });

    // –°–ª—É—à–∞–µ–º –≤—Å–µ —Å–ª–æ—Ç—ã –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    newSocket.on('allSlots', (allSlots: TimeSlot[]) => {
      console.log('‚úÖ Received all slots from server:', allSlots.length);
      setTimeSlots(allSlots);
      saveToStorage('tutoring_timeSlots', allSlots);
      console.log('‚úÖ All slots synchronized, total slots:', allSlots.length);
      });

      // –°–ª—É—à–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      newSocket.on('allUsers', (allUsers: User[]) => {
        setAllUsers(allUsers);
        saveToStorage('tutoring_users', allUsers);
      });

      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Å–µ —Å–ª–æ—Ç—ã –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
      if (socketRef.current && isConnected) {
        socketRef.current.emit('requestAllSlots');
        socketRef.current.emit('requestAllUsers');
      }

    // –°–ª—É—à–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ª–æ—Ç–æ–≤ –æ—Ç –¥—Ä—É–≥–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
    newSocket.on('slotCreated', (newSlot: TimeSlot) => {
        console.log('‚úÖ Slot created via WebSocket:', newSlot);
      setTimeSlots(prev => {
        const exists = prev.find(slot => slot.id === newSlot.id);
        if (!exists) {
          const updated = [...prev, newSlot];
          saveToStorage('tutoring_timeSlots', updated);
            console.log('‚úÖ New slot added, total slots:', updated.length);
            
            // –í–ê–ñ–ù–û: –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä –æ—Å—Ç–∞–µ—Ç—Å—è –≤–∏–¥–∏–º—ã–º –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–æ—Ç–∞
            try {
              const currentUsers = allUsers || [];
              const teacherExists = currentUsers.find((u: any) => u.id === newSlot.teacherId);
              
              if (!teacherExists) {
                console.log('‚ö†Ô∏è –†–µ–ø–µ—Ç–∏—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ allUsers –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–æ—Ç–∞, –¥–æ–±–∞–≤–ª—è–µ–º...');
                const teacherUser = {
                  id: newSlot.teacherId,
                  name: newSlot.teacherName,
                  avatar: newSlot.teacherAvatar || '',
                  role: 'teacher',
                  isRegistered: true,
                  isOnline: false,
                  lastSeen: new Date().toISOString()
                };
                
                const updatedUsers = [...currentUsers, teacherUser];
                setAllUsers(updatedUsers);
                localStorage.setItem('tutoring_users', JSON.stringify(updatedUsers));
                
                // –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
                const registeredTeachers = JSON.parse(localStorage.getItem('tutoring_registeredTeachers') || '[]');
                const teacherExistsInRegistered = registeredTeachers.find((t: any) => t.id === newSlot.teacherId);
                if (!teacherExistsInRegistered) {
                  const updatedRegisteredTeachers = [...registeredTeachers, teacherUser];
                  localStorage.setItem('tutoring_registeredTeachers', JSON.stringify(updatedRegisteredTeachers));
                  console.log('‚úÖ –†–µ–ø–µ—Ç–∏—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π');
                }
                
                console.log('‚úÖ –†–µ–ø–µ—Ç–∏—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ allUsers –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è');
              }
            } catch (error) {
              console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞:', error);
            }
            
            return updated;
          } else {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–ª–æ—Ç
            const updated = prev.map(slot => slot.id === newSlot.id ? newSlot : slot);
            saveToStorage('tutoring_timeSlots', updated);
            console.log('‚úÖ Existing slot updated, total slots:', updated.length);
          return updated;
        }
      });
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
      console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–æ—Ç–∞...');
      forceSyncData().catch(console.error);
    });

    // –°–ª—É—à–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    newSocket.on('slotBooked', (data: { slotId: string; lesson: Lesson; bookedStudentId?: string }) => {
        console.log('Slot booked via WebSocket:', data);
        setTimeSlots(prev => {
          const updated = prev.map(slot => 
          slot.id === data.slotId ? { ...slot, isBooked: true, bookedStudentId: data.bookedStudentId || data.lesson.studentId } : slot
      );
          saveToStorage('tutoring_timeSlots', updated);
          return updated;
        });
      setLessons(prev => {
        const exists = prev.find(lesson => lesson.id === data.lesson.id);
        if (!exists) {
          const updated = [...prev, data.lesson];
          saveToStorage('tutoring_lessons', updated);
            console.log('New lesson added, total lessons:', updated.length);
          return updated;
        }
        return prev;
      });
    });

    // –°–ª—É—à–∞–µ–º –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    newSocket.on('slotCancelled', (data: { slotId: string; lessonId: string }) => {
        console.log('Slot cancelled via WebSocket:', data);
        setTimeSlots(prev => {
          const updated = prev.map(slot => 
          slot.id === data.slotId ? { ...slot, isBooked: false, bookedStudentId: undefined } : slot
          );
          saveToStorage('tutoring_timeSlots', updated);
          return updated;
        });
        setLessons(prev => {
          const updated = prev.filter(lesson => lesson.id !== data.lessonId);
          saveToStorage('tutoring_lessons', updated);
          console.log('Lesson removed, total lessons:', updated.length);
          return updated;
        });
    });

    // –°–ª—É—à–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤
    newSocket.on('lessonBooked', (lesson: Lesson) => {
        console.log('Lesson booked via WebSocket:', lesson);
        setLessons(prev => {
          const exists = prev.find(l => l.id === lesson.id);
          if (!exists) {
            const updated = [...prev, lesson];
            saveToStorage('tutoring_lessons', updated);
            console.log('New lesson added via WebSocket, total lessons:', updated.length);
            return updated;
          }
          return prev;
        });
    });

    // –°–ª—É—à–∞–µ–º –Ω–æ–≤—ã–µ —á–∞—Ç—ã
    newSocket.on('chatCreated', (newChat: Chat) => {
      setChats(prev => {
        const exists = prev.find(chat => chat.id === newChat.id);
        if (!exists) {
          const updated = [...prev, newChat];
          saveToStorage('tutoring_chats', updated);
          return updated;
        }
        return prev;
      });
    });

    newSocket.on('receiveMessage', (data: { chatId: string, message: any }) => {
      setChats(prev => prev.map(chat => {
        if (chat.id === data.chatId) {
          const updatedChat = {
            ...chat,
            messages: [...chat.messages, data.message],
            lastMessage: data.message,
          };
          saveToStorage('tutoring_chats', prev.map(c => c.id === chat.id ? updatedChat : c));
          return updatedChat;
        }
        return chat;
      }));
    });

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —á–∞—Ç–æ–≤
      newSocket.on('chatDeleted', (data: { chatId: string }) => {
        console.log('chatDeleted event received:', data);
        setChats(prev => {
          const updated = prev.filter(chat => chat.id !== data.chatId);
          console.log(`Chat ${data.chatId} removed from state. Total chats: ${updated.length}`);
          saveToStorage('tutoring_chats', updated);
          return updated;
        });
      });

      newSocket.on('chatMarkedAsRead', (data: { chatId: string }) => {
        setChats(prev => {
          const updated = prev.map(chat => 
            chat.id === data.chatId 
              ? { ...chat, messages: chat.messages.map(msg => ({ ...msg, isRead: true })) }
              : chat
          );
          saveToStorage('tutoring_chats', updated);
          return updated;
        });
      });

      newSocket.on('chatMessagesCleared', (data: { chatId: string }) => {
        setChats(prev => {
          const updated = prev.map(chat => 
            chat.id === data.chatId 
              ? { ...chat, messages: [] }
              : chat
          );
          saveToStorage('tutoring_chats', updated);
          return updated;
        });
      });

      newSocket.on('chatArchived', (data: { chatId: string }) => {
        setChats(prev => {
          const updated = prev.map(chat => 
            chat.id === data.chatId 
              ? { ...chat, archived: true }
              : chat
          );
          saveToStorage('tutoring_chats', updated);
          return updated;
        });
      });

      // –°–ª—É—à–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞ –∏–∑ –∞—Ä—Ö–∏–≤–∞
      newSocket.on('chatUnarchived', (data: { chatId: string }) => {
        setChats(prev => {
          const updated = prev.map(chat => 
            chat.id === data.chatId 
              ? { ...chat, archived: false }
              : chat
          );
          saveToStorage('tutoring_chats', updated);
          return updated;
        });
      });

      // –°–ª—É—à–∞–µ–º –Ω–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      newSocket.on('newNotification', (notification: Notification) => {
        setNotifications(prev => {
          const updated = [...prev, notification];
          saveToStorage('tutoring_notifications', updated);
          return updated;
        });
      });

    // –°–ª—É—à–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–∞
    newSocket.on('slotDeleted', (data: { slotId: string }) => {
        console.log('Slot deleted via WebSocket:', data);
      setTimeSlots(prev => {
        const updated = prev.filter(slot => slot.id !== data.slotId);
        saveToStorage('tutoring_timeSlots', updated);
          console.log('Slot removed, total slots:', updated.length);
        return updated;
      });
    });

    // (dedup) –°–ª—É—à–∞—Ç–µ–ª—å allSlots —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤—ã—à–µ

      // –°–ª—É—à–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É—Ä–æ–∫–æ–≤
      newSocket.on('allLessons', (allLessons: Lesson[]) => {
        console.log('Received all lessons from server:', allLessons.length);
        setLessons(allLessons);
        saveToStorage('tutoring_lessons', allLessons);
      });

      // –°–ª—É—à–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–µ–∂–¥—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
      newSocket.on('dataUpdated', (data: { 
        type: string; 
        timeSlots: TimeSlot[]; 
        lessons?: Lesson[];
        teacherProfiles: Record<string, TeacherProfile>; 
        studentProfiles: Record<string, StudentProfile>; 
      }) => {
        console.log('Received dataUpdated event:', data.type);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ—Ç—ã
        if (data.timeSlots) {
          setTimeSlots(data.timeSlots);
          saveToStorage('tutoring_timeSlots', data.timeSlots);
          console.log('Slots updated via dataUpdated:', data.timeSlots.length);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–∫–∏
        if (data.lessons) {
          setLessons(data.lessons);
          saveToStorage('tutoring_lessons', data.lessons);
          console.log('Lessons updated via dataUpdated:', data.lessons.length);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
        if (data.teacherProfiles) {
          setTeacherProfiles(data.teacherProfiles);
          saveToStorage('tutoring_teacherProfiles', data.teacherProfiles);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
          const users = JSON.parse(localStorage.getItem('tutoring_users') || '[]');
          const updatedUsers = users.map((u: User) => {
            if (u.role === 'teacher' && data.teacherProfiles[u.id]) {
              return { ...u, profile: data.teacherProfiles[u.id] };
            }
            return u;
          });
          setAllUsers(updatedUsers);
          saveToStorage('tutoring_users', updatedUsers);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        if (data.studentProfiles) {
          setStudentProfiles(data.studentProfiles);
          saveToStorage('tutoring_studentProfiles', data.studentProfiles);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
          const users = JSON.parse(localStorage.getItem('tutoring_users') || '[]');
          const updatedUsers = users.map((u: User) => {
            if (u.role === 'student' && data.studentProfiles[u.id]) {
              return { ...u, profile: data.studentProfiles[u.id] };
            }
            return u;
          });
          setAllUsers(updatedUsers);
          saveToStorage('tutoring_users', updatedUsers);
        }
      });

      // –°–ª—É—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      newSocket.on('userRegistered', (newUser: User) => {
        setAllUsers(prev => {
          const exists = prev.find(user => user.id === newUser.id);
          if (!exists) {
            const updated = [...prev, newUser];
            saveToStorage('tutoring_users', updated);
            
            // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –∫–ª—é—á–µ –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
            if (newUser.role === 'teacher') {
              const registeredTeachers = JSON.parse(localStorage.getItem('tutoring_registeredTeachers') || '[]');
              const teacherToSave = {
                ...newUser,
                isRegistered: true,
                isOnline: false,
                lastSeen: new Date().toISOString()
              };
              const updatedRegisteredTeachers = [...registeredTeachers, teacherToSave];
              localStorage.setItem('tutoring_registeredTeachers', JSON.stringify(updatedRegisteredTeachers));
              console.log('üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:', newUser.name);
            }
            
            return updated;
          }
          return prev;
        });
        // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ —É —É—á–µ–Ω–∏–∫–æ–≤
        try {
          loadRegisteredTeachers();
          if (socketRef.current && isConnected) {
            socketRef.current.emit('requestAllUsers');
          }
        } catch {}
      });

      // –°–ª—É—à–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      newSocket.on('userDeleted', (data: { userId: string; userRole: string; deletedUser: any; deletedData: any }) => {
        console.log('üóëÔ∏è –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', data);
        
        // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞
        setAllUsers(prev => {
          const updated = prev.filter(user => user.id !== data.userId);
          saveToStorage('tutoring_users', updated);
          return updated;
        });
        
        // –£–¥–∞–ª—è–µ–º –∏–∑ –ø—Ä–æ—Ñ–∏–ª–µ–π
        if (data.userRole === 'teacher') {
          setTeacherProfiles(prev => {
            const updated = { ...prev };
            delete updated[data.userId];
            saveToStorage('tutoring_teacherProfiles', updated);
            return updated;
          });
        } else if (data.userRole === 'student') {
          setStudentProfiles(prev => {
            const updated = { ...prev };
            delete updated[data.userId];
            saveToStorage('tutoring_studentProfiles', updated);
            return updated;
          });
        }
        
        // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        setTimeSlots(prev => prev.filter(slot => slot.teacherId !== data.userId));
        setLessons(prev => prev.filter(lesson => 
          lesson.teacherId !== data.userId && lesson.studentId !== data.userId
        ));
        setChats(prev => prev.filter(chat => 
          !chat.participants.includes(data.userId)
        ));
        setPosts(prev => prev.filter(post => post.userId !== data.userId));
        setNotifications(prev => prev.filter(notification => 
          notification.userId !== data.userId
        ));
        
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è');
      });

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±—ã—Ç–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–∫–∞
    if (socketRef.current) {
      socketRef.current.on('lessonCompleted', (data: { lesson: any }) => {
        setLessons(prev => {
          const updated = prev.map(l => l.id === data.lesson.id ? data.lesson : l);
          saveToStorage('tutoring_lessons', updated);
          return updated;
        });
        // --- –°–¢–ê–¢–ò–°–¢–ò–ö–ê –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ ---
        if (user && user.role === 'teacher' && data.lesson.status === 'completed') {
          const profile: TeacherProfile = { ...(user.profile as TeacherProfile) };
          profile.lessonsCount = (profile.lessonsCount || 0) + 1;
          updateProfile(profile);
        }
        // --- –ö–û–ù–ï–¶ –°–¢–ê–¢–ò–°–¢–ò–ö–ò ---
      });
    }

    newSocket.on('studentProfiles', (profiles: Record<string, StudentProfile>) => {
      setStudentProfiles(profiles || {});
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–æ—Ñ–∏–ª—è–º–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        const users = JSON.parse(localStorage.getItem('tutoring_users') || '[]');
        const updatedUsers = [...users];
        
        Object.entries(profiles).forEach(([studentId, profile]) => {
          const existingUserIndex = updatedUsers.findIndex((u: User) => u.id === studentId);
          if (existingUserIndex >= 0) {
            updatedUsers[existingUserIndex] = { ...updatedUsers[existingUserIndex], profile };
          } else {
            updatedUsers.push({
              id: studentId,
              email: profile.email || '',
              name: profile.name || '',
              nickname: profile.nickname || '',
              role: 'student',
              phone: profile.phone || '',
              profile
            });
          }
        });
        
        localStorage.setItem('tutoring_users', JSON.stringify(updatedUsers));
        setAllUsers(updatedUsers);
      });
      
      newSocket.on('teacherProfiles', (profiles: Record<string, TeacherProfile>) => {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ teacherProfiles
        setTeacherProfiles(profiles);
        saveToStorage('tutoring_teacherProfiles', profiles);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–æ—Ñ–∏–ª—è–º–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
        const users = JSON.parse(localStorage.getItem('tutoring_users') || '[]');
        const updatedUsers = [...users];
        
        Object.entries(profiles).forEach(([teacherId, profile]) => {
          const existingUserIndex = updatedUsers.findIndex((u: User) => u.id === teacherId);
          if (existingUserIndex >= 0) {
            updatedUsers[existingUserIndex] = { ...updatedUsers[existingUserIndex], profile };
          } else {
            updatedUsers.push({
              id: teacherId,
              email: profile.email || '',
              name: profile.name || '',
              nickname: profile.nickname || '',
              role: 'teacher',
              phone: profile.phone || '',
              profile
            });
          }
        });
        
        localStorage.setItem('tutoring_users', JSON.stringify(updatedUsers));
        setAllUsers(updatedUsers);
      });

      // (dedup) –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ studentProfiles —É–¥–∞–ª—ë–Ω
    newSocket.on('studentProfileUpdated', (data: { studentId: string; profile: StudentProfile }) => {
      setStudentProfiles(prev => ({ ...prev, [data.studentId]: data.profile }));
    });

    // --- –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –º–µ–∂–¥—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏ ---
    newSocket.on('teacherProfileUpdated', (data: { teacherId: string; profile: TeacherProfile }) => {
      try {
        const users = JSON.parse(localStorage.getItem('tutoring_users') || '[]');
        const updatedUsers = users.map((u: User) =>
          u.id === data.teacherId ? { ...u, profile: data.profile, avatar: data.profile.avatar } : u
        );
        localStorage.setItem('tutoring_users', JSON.stringify(updatedUsers));
        setAllUsers(updatedUsers);
      } catch (e) {
      }
    });

    // --- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è –º–µ–∂–¥—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏ ---
      newSocket.on('profileUpdated', (data: { type: string; userId: string; profile: StudentProfile | TeacherProfile } | { id: string; role: string; profile: StudentProfile | TeacherProfile }) => {
      try {
        const users = JSON.parse(localStorage.getItem('tutoring_users') || '[]');
        let found = false;
          
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
          const userId = 'userId' in data ? data.userId : data.id;
          const role = 'type' in data ? data.type : data.role;
          const profile = data.profile;
          
        const updatedUsers = users.map((u: User) => {
            if (u.id === userId) {
            found = true;
              return { ...u, profile: profile, avatar: profile.avatar, name: profile.name || u.name, email: profile.email || u.email };
          }
          return u;
        });
        if (!found) {
          // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ –±—ã–ª–æ
          updatedUsers.push({
              id: userId,
              role: role,
              profile: profile,
              avatar: profile.avatar,
              name: profile.name || '',
              email: profile.email || ''
          });
        }
        localStorage.setItem('tutoring_users', JSON.stringify(updatedUsers));
        setAllUsers(updatedUsers);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö
          if (role === 'teacher') {
            setTeacherProfiles(prev => ({ ...prev, [userId]: profile as TeacherProfile }));
          } else if (role === 'student') {
            setStudentProfiles(prev => ({ ...prev, [userId]: profile as StudentProfile }));
          }
          
          console.log('Profile updated via WebSocket:', { userId, role, profile });
      } catch (e) {
          console.error('Error processing profileUpdated event:', e);
        }
      });

      // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
      newSocket.on('userRegistered', (newUser: User) => {
        try {
          const users = JSON.parse(localStorage.getItem('tutoring_users') || '[]');
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
          const existingUserIndex = users.findIndex((u: User) => u.id === newUser.id);
          
          if (existingUserIndex >= 0) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            users[existingUserIndex] = newUser;
          } else {
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            users.push(newUser);
          }
          
          localStorage.setItem('tutoring_users', JSON.stringify(users));
          setAllUsers(users);
          
          // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –∫–ª—é—á–µ –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
          if (newUser.role === 'teacher') {
            const registeredTeachers = JSON.parse(localStorage.getItem('tutoring_registeredTeachers') || '[]');
            const teacherToSave = {
              ...newUser,
              isRegistered: true,
              isOnline: false,
              lastSeen: new Date().toISOString()
            };
            const updatedRegisteredTeachers = [...registeredTeachers, teacherToSave];
            localStorage.setItem('tutoring_registeredTeachers', JSON.stringify(updatedRegisteredTeachers));
            console.log('üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:', newUser.name);
          }
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
          loadRegisteredTeachers().catch(console.error);
          if (socketRef.current && isConnected) {
            socketRef.current.emit('requestAllUsers');
          }
        } catch (e) {
        }
      });

      // ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ü–û–°–¢–û–í =====
      
      // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤
      newSocket.on('allPosts', (allPosts: Post[]) => {
        setPosts(allPosts);
        saveToStorage('tutoring_posts', allPosts);
      });

      // –ù–æ–≤—ã–π –ø–æ—Å—Ç —Å–æ–∑–¥–∞–Ω
      newSocket.on('postCreated', (newPost: Post) => {
        setPosts(prev => {
          const updated = [newPost, ...prev];
          saveToStorage('tutoring_posts', updated);
          return updated;
        });
      });

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –ø–æ—Å—Ç
      newSocket.on('postReactionUpdated', (data: { postId: string; reactions: any[]; likes: number }) => {
        setPosts(prev => {
          const updated = prev.map(post => 
            post.id === data.postId 
              ? { ...post, reactions: data.reactions, likes: data.likes }
              : post
          );
          saveToStorage('tutoring_posts', updated);
          return updated;
        });
      });

      // –î–æ–±–∞–≤–ª–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É
      newSocket.on('postCommentAdded', (data: { postId: string; comment: Comment }) => {
        setPosts(prev => {
          const updated = prev.map(post => 
            post.id === data.postId 
              ? { ...post, comments: [...post.comments, data.comment] }
              : post
          );
          saveToStorage('tutoring_posts', updated);
          return updated;
        });
      });

      // –ü–æ—Å—Ç –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω
      newSocket.on('postEdited', (data: { postId: string; text: string; tags: string[]; editedAt: string }) => {
        setPosts(prev => {
          const updated = prev.map(post => 
            post.id === data.postId 
              ? { 
                  ...post, 
                  text: data.text, 
                  tags: data.tags,
                  editedAt: data.editedAt 
                }
              : post
          );
          saveToStorage('tutoring_posts', updated);
          return updated;
        });
      });

      // –ü–æ—Å—Ç —É–¥–∞–ª–µ–Ω
      newSocket.on('postDeleted', (data: { postId: string }) => {
        setPosts(prev => {
          const updated = prev.filter(post => post.id !== data.postId);
          saveToStorage('tutoring_posts', updated);
          return updated;
        });
      });

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–ª–∞–¥–∫–∏ –ø–æ—Å—Ç–∞
      newSocket.on('postBookmarkUpdated', (data: { postId: string; bookmarks: string[] }) => {
        setPosts(prev => {
          const updated = prev.map(post => 
            post.id === data.postId 
              ? { ...post, bookmarks: data.bookmarks }
              : post
          );
          saveToStorage('tutoring_posts', updated);
          return updated;
        });
      });

      // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ—Å—Ç–æ–≤
      newSocket.on('searchResults', (results: Post[]) => {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
      });

      // ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –£–í–ï–î–û–ú–õ–ï–ù–ò–ô =====
      
      // –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      newSocket.on('userNotifications', (userNotifications: Notification[]) => {
        setNotifications(userNotifications);
        saveToStorage('tutoring_notifications', userNotifications);
      });

      // (dedup) –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ newNotification —É–¥–∞–ª—ë–Ω (–æ–Ω —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤—ã—à–µ)

      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
      newSocket.on('notificationMarkedAsRead', (data: { notificationId: string }) => {
        setNotifications(prev => {
          const updated = prev.map(n => 
            n.id === data.notificationId 
              ? { ...n, isRead: true, readAt: new Date().toISOString() }
              : n
          );
          saveToStorage('tutoring_notifications', updated);
          return updated;
        });
      });

      // –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
      newSocket.on('allNotificationsMarkedAsRead', (data: { userId: string }) => {
        setNotifications(prev => {
          const updated = prev.map(n => 
            n.userId === data.userId 
              ? { ...n, isRead: true, readAt: new Date().toISOString() }
              : n
          );
          saveToStorage('tutoring_notifications', updated);
          return updated;
        });
      });

    return () => {
      try {
        newSocket.removeAllListeners();
      } catch {}
      try {
        newSocket.disconnect();
      } catch {}
      socketRef.current = null;
    };
    };

    initializeConnection();
  }, []);

  // –°–ª—É—à–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∏–π localStorage –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–µ–∂–¥—É –≤–∫–ª–∞–¥–∫–∞–º–∏
  useEffect(() => {
    const handleStorage = (e: StorageEvent) => {
      if (e.key === 'tutoring_users') {
        try {
          const newUsers = JSON.parse(e.newValue || '[]');
          setAllUsers(newUsers);
          
          // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
          const teachers = newUsers.filter((u: any) => u.role === 'teacher');
          console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤ —á–µ—Ä–µ–∑ localStorage:', teachers.length);
        } catch (error) {
          setAllUsers([]);
        }
      }
    };
    
    // –¢–∞–∫–∂–µ —Å–ª—É—à–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
    const handleCustomStorage = (e: CustomEvent) => {
      if (e.detail?.key === 'tutoring_users') {
        try {
          const newUsers = JSON.parse(e.detail.newValue || '[]');
          setAllUsers(newUsers);
          console.log('üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ customStorage:', newUsers.length);
        } catch (error) {
          setAllUsers([]);
        }
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
      if (e.detail?.key === 'tutoring_teacherProfiles') {
        try {
          const newProfiles = JSON.parse(e.detail.newValue || '{}');
          setTeacherProfiles(newProfiles);
          console.log('üîÑ –ü—Ä–æ—Ñ–∏–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ customStorage:', Object.keys(newProfiles).length);
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π:', error);
        }
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
      if (e.detail?.key === 'tutoring_studentProfiles') {
        try {
          const newProfiles = JSON.parse(e.detail.newValue || '{}');
          setStudentProfiles(newProfiles);
          console.log('üîÑ –ü—Ä–æ—Ñ–∏–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ customStorage:', Object.keys(newProfiles).length);
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:', error);
        }
      }
    };

    window.addEventListener('storage', handleStorage);
    window.addEventListener('customStorage', handleCustomStorage as EventListener);
    
    return () => {
      window.removeEventListener('storage', handleStorage);
      window.removeEventListener('customStorage', handleCustomStorage as EventListener);
    };
  }, []);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  useEffect(() => {
    saveToStorage('tutoring_timeSlots', timeSlots);
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ timeSlots
    if (timeSlots.length > 0) {
      console.log('üîÑ timeSlots –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å —Å–µ—Ä–≤–µ—Ä–æ–º...');
      forceSyncData().catch(console.error);
    }
  }, [timeSlots, forceSyncData]);

  useEffect(() => {
    saveToStorage('tutoring_lessons', lessons);
  }, [lessons]);

  useEffect(() => {
    saveToStorage('tutoring_chats', chats);
  }, [chats]);

  useEffect(() => {
    saveToStorage('tutoring_posts', posts);
  }, [posts]);

  useEffect(() => {
    saveToStorage('tutoring_notifications', notifications);
  }, [notifications]);

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    if (user && socketRef.current && isConnected) {
      socketRef.current.emit('subscribeNotifications', user.id);
      socketRef.current.emit('requestUserNotifications', user.id);
    }
  }, [user, isConnected]);

  const createTimeSlot = (slot: Omit<TimeSlot, 'id'>) => {
    const newSlot: TimeSlot = {
      ...slot,
      id: `slot_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
    };
    
    
    setTimeSlots(prev => {
      const updated = [...prev, newSlot];
      saveToStorage('tutoring_timeSlots', updated);
      return updated;
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Å–ª–æ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
    if (socketRef.current && isConnected) {
      socketRef.current.emit('createSlot', newSlot);
    }
  };

  // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–æ—Ç–∞ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º Promise
  const createSlot = async (
    slot: Omit<TimeSlot, 'id' | 'isBooked'>,
    studentId?: string,
    studentName?: string,
    options?: { mode?: string }
  ): Promise<TimeSlot> => {
    return new Promise<TimeSlot>((resolve, reject) => {
      // –ï—Å–ª–∏ —Ä–µ–∂–∏–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω studentId/studentName ‚Äî –æ—à–∏–±–∫–∞
      if (options?.mode === 'assign' && (!studentId || !studentName)) {
        alert('–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω —É—á–µ–Ω–∏–∫ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —É—Ä–æ–∫–∞!');
        reject(new Error('createSlot: assign mode without studentId/studentName'));
        return;
      }
      const isBooked = !!studentId;
      const newSlot: TimeSlot = {
        ...slot,
        id: `slot_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
        isBooked,
        ...(isBooked ? { bookedStudentId: studentId } : {}),
      };
      setTimeSlots(prev => {
        const updated = [...prev, newSlot];
        saveToStorage('tutoring_timeSlots', updated);
        console.log('‚úÖ –°–ª–æ—Ç —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ:', newSlot.id);
        return updated;
      });
      
      // –í–ê–ñ–ù–û: –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä –æ—Å—Ç–∞–µ—Ç—Å—è –≤–∏–¥–∏–º—ã–º –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–æ—Ç–∞
      try {
        const currentUsers = allUsers || [];
        const teacherExists = currentUsers.find((u: any) => u.id === newSlot.teacherId);
        
        if (!teacherExists) {
          console.log('‚ö†Ô∏è –†–µ–ø–µ—Ç–∏—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ allUsers, –¥–æ–±–∞–≤–ª—è–µ–º...');
          const teacherUser = {
            id: newSlot.teacherId,
            name: newSlot.teacherName,
            avatar: newSlot.teacherAvatar || '',
            role: 'teacher',
            isRegistered: true,
            isOnline: false,
            lastSeen: new Date().toISOString()
          };
          
          const updatedUsers = [...currentUsers, teacherUser];
          setAllUsers(updatedUsers);
          localStorage.setItem('tutoring_users', JSON.stringify(updatedUsers));
          
          // –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
          const registeredTeachers = JSON.parse(localStorage.getItem('tutoring_registeredTeachers') || '[]');
          const teacherExistsInRegistered = registeredTeachers.find((t: any) => t.id === newSlot.teacherId);
          if (!teacherExistsInRegistered) {
            const updatedRegisteredTeachers = [...registeredTeachers, teacherUser];
            localStorage.setItem('tutoring_registeredTeachers', JSON.stringify(updatedRegisteredTeachers));
            console.log('‚úÖ –†–µ–ø–µ—Ç–∏—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π');
          }
          
          console.log('‚úÖ –†–µ–ø–µ—Ç–∏—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ allUsers –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è');
        } else {
          console.log('‚úÖ –†–µ–ø–µ—Ç–∏—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ allUsers');
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞:', error);
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–æ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä, –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      if (socketRef.current && isConnected) {
        socketRef.current.emit('createSlot', newSlot);
        console.log('üì° –°–ª–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
      } else {
        console.log('‚ö†Ô∏è –ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º, —Å–ª–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ');
      }
      // –ï—Å–ª–∏ —Å–ª–æ—Ç —Å—Ä–∞–∑—É –±—Ä–æ–Ω–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —É—á–µ–Ω–∏–∫–∞, —Å–æ–∑–¥–∞—ë–º Lesson
      if (isBooked && studentId && studentName) {
        const newLesson: Lesson = {
          id: `lesson_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
          studentId,
          teacherId: newSlot.teacherId,
          studentName,
          teacherName: newSlot.teacherName,
          subject: newSlot.subject,
          date: newSlot.date,
          startTime: newSlot.startTime,
          endTime: newSlot.endTime,
          duration: newSlot.duration,
          format: newSlot.format,
          status: 'scheduled',
          price: newSlot.price,
          lessonType: newSlot.lessonType,
        };
        setLessons(prev => [...prev, newLesson]);
        getOrCreateChat(studentId, newSlot.teacherId, studentName, newSlot.teacherName);
        // --- –°–¢–ê–¢–ò–°–¢–ò–ö–ê ---
        if (user && user.role === 'teacher') {
          const profile: TeacherProfile = { ...(user.profile as TeacherProfile) };
          if (!profile.students) profile.students = [];
          if (!profile.students.includes(studentId)) profile.students.push(studentId);
          updateProfile(profile);
        }
        // --- –ö–û–ù–ï–¶ –°–¢–ê–¢–ò–°–¢–ò–ö–ò ---
        if (socketRef.current && isConnected) {
          socketRef.current.emit('bookSlot', { slotId: newSlot.id, lesson: newLesson, bookedStudentId: studentId });
        }
      }
      resolve(newSlot);
    });
  };

  // –ò–∑–º–µ–Ω—è—é —Ñ—É–Ω–∫—Ü–∏—é bookLesson, —á—Ç–æ–±—ã –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
  const bookLesson = (slotId: string, studentId: string, studentName: string, comment?: string) => {
    const slot = timeSlots.find(s => s.id === slotId);
    if (!slot || slot.isBooked) {
      return;
    }

    // --- –°–¢–ê–¢–ò–°–¢–ò–ö–ê ---
    if (user && user.role === 'teacher') {
      const profile: TeacherProfile = { ...(user.profile as TeacherProfile) };
      if (!profile.students) profile.students = [];
      if (!profile.students.includes(studentId)) profile.students.push(studentId);
      updateProfile(profile);
    }
    // --- –ö–û–ù–ï–¶ –°–¢–ê–¢–ò–°–¢–ò–ö–ò ---


    // –û—Ç–º–µ—á–∞–µ–º —Å–ª–æ—Ç –∫–∞–∫ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º bookedStudentId
    setTimeSlots(prev => 
      prev.map(s => s.id === slotId ? { ...s, isBooked: true, bookedStudentId: studentId } : s)
    );

    // –°–æ–∑–¥–∞–µ–º —É—Ä–æ–∫
    const newLesson: Lesson = {
      id: `lesson_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      studentId,
      teacherId: slot.teacherId,
      studentName,
      teacherName: slot.teacherName,
      subject: slot.subject,
      date: slot.date,
      startTime: slot.startTime,
      endTime: slot.endTime,
      duration: slot.duration,
      format: slot.format,
      status: 'scheduled',
      price: slot.price,
      lessonType: slot.lessonType,
      comment: comment || '',
    };

    setLessons(prev => [...prev, newLesson]);

    // –°–æ–∑–¥–∞–µ–º —á–∞—Ç –º–µ–∂–¥—É —É—á–µ–Ω–∏–∫–æ–º –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º
    getOrCreateChat(studentId, slot.teacherId, studentName, slot.teacherName);
    

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    if (socketRef.current && isConnected) {
      socketRef.current.emit('bookSlot', { slotId, lesson: newLesson, bookedStudentId: studentId });
    }
  };

  const cancelLesson = (lessonId: string) => {
    const lesson = lessons.find(l => l.id === lessonId);
    if (!lesson) return;


    // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–ª–æ—Ç
    const slot = timeSlots.find(s => 
      s.teacherId === lesson.teacherId && 
      s.date === lesson.date && 
      s.startTime === lesson.startTime
    );

    // –£–¥–∞–ª—è–µ–º —É—Ä–æ–∫
    setLessons(prev => prev.filter(l => l.id !== lessonId));

    // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å–ª–æ—Ç –∏ –æ—á–∏—â–∞–µ–º bookedStudentId
    if (slot) {
      setTimeSlots(prev => 
        prev.map(s => s.id === slot.id ? { ...s, isBooked: false, bookedStudentId: undefined } : s)
      );

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–º–µ–Ω–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      if (socketRef.current && isConnected) {
        socketRef.current.emit('cancelSlot', { slotId: slot.id, lessonId });
      }
    }
  };

  const rescheduleLesson = (lessonId: string, newDate: string, newStartTime: string) => {
    const lesson = lessons.find(l => l.id === lessonId);
    if (!lesson) return;


    // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
    const endTime = new Date(`2000-01-01T${newStartTime}`);
    endTime.setMinutes(endTime.getMinutes() + lesson.duration);

    // –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–∫
    setLessons(prev => 
      prev.map(l => 
        l.id === lessonId 
          ? { 
              ...l, 
              date: newDate, 
              startTime: newStartTime, 
              endTime: endTime.toTimeString().slice(0, 5) 
            } 
          : l
      )
    );

    // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å—Ç–∞—Ä—ã–π —Å–ª–æ—Ç –∏ –æ—á–∏—â–∞–µ–º bookedStudentId
    setTimeSlots(prev => 
      prev.map(s => 
        s.teacherId === lesson.teacherId && 
        s.date === lesson.date && 
        s.startTime === lesson.startTime 
          ? { ...s, isBooked: false, bookedStudentId: undefined } 
          : s
      )
    );
  };

  const getFilteredSlots = (filters: FilterOptions): TimeSlot[] => {
    const filtered = timeSlots.filter(slot => {
      // –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
      if (slot.isBooked) return false;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ —Å–ª–æ—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
      const slotDate = new Date(slot.date);
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      if (slotDate < today) return false;
      
      // –§–∏–ª—å—Ç—Ä –ø–æ –∫–ª–∞—Å—Å—É
      if (filters.grade && filters.grade !== '') {
        if (!slot.grades || !slot.grades.includes(filters.grade)) return false;
      }
      
      // –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É
      if (filters.subject && filters.subject !== '') {
        if (slot.subject !== filters.subject) return false;
      }
      
      // –§–∏–ª—å—Ç—Ä –ø–æ –æ–ø—ã—Ç—É
      if (filters.experience && filters.experience !== '') {
        if (slot.experience !== filters.experience) return false;
      }
      
      // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É —É—Ä–æ–∫–∞
      if (filters.lessonType && filters.lessonType !== '') {
        if (slot.lessonType !== filters.lessonType) return false;
      }
      
      // –§–∏–ª—å—Ç—Ä –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      if (filters.duration && filters.duration > 0) {
        if (slot.duration !== filters.duration) return false;
      }
      
      // –§–∏–ª—å—Ç—Ä –ø–æ —Ñ–æ—Ä–º–∞—Ç—É
      if (filters.format && filters.format !== '') {
        if (slot.format !== filters.format) return false;
      }
      
      // –§–∏–ª—å—Ç—Ä –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É —Ä–µ–π—Ç–∏–Ω–≥—É
      if (filters.minRating && filters.minRating > 0) {
        if ((slot.rating || 0) < filters.minRating) return false;
      }
      
      // –§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–ª—è–º –æ–±—É—á–µ–Ω–∏—è
      if (filters.goals && filters.goals.length > 0) {
        if (!slot.goals || !filters.goals.some(goal => slot.goals!.includes(goal))) return false;
      }
      
      // –§–∏–ª—å—Ç—Ä –ø–æ –≥–æ—Ä–æ–¥—É (–µ—Å–ª–∏ –µ—Å—Ç—å –≤ —Å–ª–æ—Ç–µ)
      if (filters.city && filters.city !== '') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ä–æ–¥ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –ø—Ä–æ—Ñ–∏–ª—å
        const teacher = allUsers.find(u => u.id === slot.teacherId);
        const teacherCity = teacher?.profile?.city || '';
        if (teacherCity && !teacherCity.toLowerCase().includes(filters.city.toLowerCase())) return false;
      }
      
      return true;
    });
    
    return filtered;
  };

  const getOrCreateChat = (participant1Id: string, participant2Id: string, participant1Name: string, participant2Name: string): string => {
    console.log('üîç getOrCreateChat DEBUG:');
    console.log('- Participant 1:', { id: participant1Id, name: participant1Name });
    console.log('- Participant 2:', { id: participant2Id, name: participant2Name });
    console.log('- Current chats count:', chats.length);
    
    const existingChat = chats.find(chat => 
      chat.participants.includes(participant1Id) && chat.participants.includes(participant2Id)
    );

    if (existingChat) {
      console.log('‚úÖ Found existing chat:', existingChat.id);
      return existingChat.id;
    }

    console.log('üÜï Creating new chat...');
    const newChat: Chat = {
      id: `chat_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      participants: [participant1Id, participant2Id],
      participantNames: [participant1Name, participant2Name],
      messages: [],
    };

    console.log('üìù New chat created:', newChat.id);

    setChats(prev => {
      const updated = [...prev, newChat];
      saveToStorage('tutoring_chats', updated);
      console.log('üíæ Chat saved to localStorage, total chats:', updated.length);
      return updated;
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —á–∞—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
    if (socketRef.current && isConnected) {
      console.log('üì° Sending chat to server...');
      socketRef.current.emit('createChat', newChat);
      
      // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–º —á–∞—Ç–µ
      const notification = {
        id: `notification_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
        userId: participant2Id, // ID —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
        type: 'new_chat',
        title: '–ù–æ–≤—ã–π —á–∞—Ç',
        message: `${participant1Name} —Å–æ–∑–¥–∞–ª —Å –≤–∞–º–∏ —á–∞—Ç`,
        isRead: false,
        timestamp: new Date().toISOString(),
        data: { chatId: newChat.id, studentId: participant1Id, studentName: participant1Name }
      };
      
      socketRef.current.emit('createNotification', notification);
      console.log('üì¨ Notification sent to server');
    } else {
      console.log('‚ö†Ô∏è Socket not connected, chat not sent to server');
    }

    console.log('üîç END getOrCreateChat DEBUG');
    return newChat.id;
  };

  const sendMessage = (chatId: string, senderId: string, senderName: string, content: string) => {
    console.log('üîç sendMessage DEBUG:');
    console.log('- Chat ID:', chatId);
    console.log('- Sender:', { id: senderId, name: senderName });
    console.log('- Content:', content);
    
    // –ù–∞—Ö–æ–¥–∏–º —á–∞—Ç –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    const chat = chats.find(c => c.id === chatId);
    if (!chat) {
      console.error('‚ùå Chat not found:', chatId);
      return;
    }
    
    console.log('‚úÖ Chat found:', { 
      id: chat.id, 
      participants: chat.participants, 
      participantNames: chat.participantNames 
    });
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–¥—Ä—É–≥–æ–π —É—á–∞—Å—Ç–Ω–∏–∫ —á–∞—Ç–∞)
    const receiverId = chat.participants.find(id => id !== senderId);
    const receiverName = chat.participantNames.find((name, index) => chat.participants[index] !== senderId);
    
    if (!receiverId) {
      console.error('‚ùå Receiver not found in chat participants');
      return;
    }
    
    console.log('üì¨ Receiver:', { id: receiverId, name: receiverName });
    
    const newMessage = {
      id: `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      senderId,
      senderName,
      receiverId,
      receiverName: receiverName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      content,
      timestamp: new Date().toISOString(),
      isRead: false,
    };

    console.log('üìù Message created:', newMessage.id);

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ —Å—Ä–∞–∑—É –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    setChats(prev => prev.map(chat => {
      if (chat.id === chatId) {
        const updatedChat = {
          ...chat,
          messages: [...chat.messages, newMessage],
          lastMessage: newMessage,
        };
        saveToStorage('tutoring_chats', prev.map(c => c.id === chat.id ? updatedChat : c));
        console.log('üíæ Message saved locally, total messages in chat:', updatedChat.messages.length);
        return updatedChat;
      }
      return chat;
    }));

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
    if (socketRef.current && isConnected) {
      console.log('üì° Sending message to server...');
      socketRef.current.emit('sendMessage', { chatId, message: newMessage });
      console.log('‚úÖ Message sent to server');
    } else {
      console.log('‚ö†Ô∏è Socket not connected, message not sent to server');
    }
    
    console.log('üîç END sendMessage DEBUG');
  };

  // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ª—é–±–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å–æ–∑–¥–∞–Ω–∏–µ–º —á–∞—Ç–∞
  const sendMessageToUser = (senderId: string, senderName: string, receiverId: string, receiverName: string, content: string): string => {
    console.log('üîç sendMessageToUser DEBUG:');
    console.log('- Sender:', { id: senderId, name: senderName });
    console.log('- Receiver:', { id: receiverId, name: receiverName });
    console.log('- Content:', content);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–¥–∞–Ω—ã
    if (!senderId || !senderName || !receiverId || !receiverName || !content) {
      console.error('‚ùå Missing required parameters for sendMessageToUser');
      return '';
    }
    
    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º —á–∞—Ç –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    const chatId = getOrCreateChat(senderId, receiverId, senderName, receiverName);
    console.log('- Chat ID:', chatId);
    
    if (!chatId) {
      console.error('‚ùå Failed to create or find chat');
      return '';
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–æ–∑–¥–∞–Ω–Ω—ã–π/–Ω–∞–π–¥–µ–Ω–Ω—ã–π —á–∞—Ç
    sendMessage(chatId, senderId, senderName, content);
    
    console.log('‚úÖ Message sent successfully to chat:', chatId);
    console.log('üîç END sendMessageToUser DEBUG');
    return chatId;
  };

  const completeLesson = (lessonId: string) => {
    if (socketRef.current && isConnected) {
      socketRef.current.emit('lessonCompleted', { lessonId });
    }
  };

  const updateStudentProfile = (studentId: string, profile: StudentProfile) => {
    if (socketRef.current) {
      socketRef.current.emit('updateStudentProfile', { studentId, profile });
    }
    setStudentProfiles(prev => ({ ...prev, [studentId]: profile }));
  };

  const deleteSlot = (slotId: string) => {
    setTimeSlots(prev => {
      // –í–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–º–µ—á–∞–µ–º —Å–ª–æ—Ç –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π
      const updated = prev.map(slot => 
        slot.id === slotId ? { ...slot, isDeleted: true } : slot
      );
      saveToStorage('tutoring_timeSlots', updated);
      return updated;
    });
    if (socketRef.current && isConnected) {
      socketRef.current.emit('deleteSlot', { slotId });
    }
  };

  const clearAllData = () => {
    
    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    setTimeSlots([]);
    setLessons([]);
    setChats([]);
    
    // –û—á–∏—â–∞–µ–º localStorage, –Ω–æ –ù–ï —É–¥–∞–ª—è–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
    localStorage.removeItem('tutoring_timeSlots');
    localStorage.removeItem('tutoring_lessons');
    localStorage.removeItem('tutoring_chats');
    localStorage.removeItem('tutoring_users');
    localStorage.removeItem('tutoring_currentUser');
    
    // –ù–ï —É–¥–∞–ª—è–µ–º 'tutoring_registeredTeachers' - –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –æ—Å—Ç–∞—Ç—å—Å—è –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
  const updateTeacherProfile = (teacherId: string, profile: TeacherProfile) => {
    console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:', teacherId, profile);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    setTeacherProfiles(prev => {
      const updated = { ...prev, [teacherId]: profile };
      saveToStorage('tutoring_teacherProfiles', updated);
      console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ teacherProfiles');
      return updated;
    });

    if (socketRef.current && isConnected) {
      socketRef.current.emit('updateTeacherProfile', { teacherId, profile });
      console.log('üì° –ü—Ä–æ—Ñ–∏–ª—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
    }
    
    // --- –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
    try {
      const users = JSON.parse(localStorage.getItem('tutoring_users') || '[]');
      const updatedUsers = users.map((u: any) =>
        u.id === teacherId ? { ...u, profile, avatar: profile.avatar } : u
      );
      localStorage.setItem('tutoring_users', JSON.stringify(updatedUsers));
      console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω –≤ tutoring_users');
      
      // –í–ê–ñ–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º allUsers –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, —á—Ç–æ–±—ã —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä –æ—Å—Ç–∞–ª—Å—è –≤–∏–¥–∏–º—ã–º
      setAllUsers(prev => {
        const updated = prev.map((u: any) =>
          u.id === teacherId ? { ...u, profile, avatar: profile.avatar } : u
        );
        console.log('‚úÖ allUsers –æ–±–Ω–æ–≤–ª–µ–Ω, —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä –æ—Å—Ç–∞–ª—Å—è –≤–∏–¥–∏–º—ã–º');
        return updated;
      });
      
      // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
      const registeredTeachers = JSON.parse(localStorage.getItem('tutoring_registeredTeachers') || '[]');
      const updatedRegisteredTeachers = registeredTeachers.map((t: any) =>
        t.id === teacherId ? { ...t, profile, avatar: profile.avatar } : t
      );
      localStorage.setItem('tutoring_registeredTeachers', JSON.stringify(updatedRegisteredTeachers));
      console.log('‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
      
    } catch (e) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', e);
    }
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–ø–∏—Å—è–º–∏
  const createPost = (postData: { text: string; media: File[]; type: 'text' | 'image' | 'video' }) => {
    if (!user) return;


    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–≥–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞
    const extractTags = (text: string) => {
      if (!text) return [];
      const hashtagRegex = /#[\w–∞-—è—ë]+/gi;
      const matches = text.match(hashtagRegex);
      return matches ? [...new Set(matches.map(tag => tag.toLowerCase()))] : [];
    };

    // –°–æ–∑–¥–∞–µ–º URL –¥–ª—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
    const mediaUrls = postData.media.map(file => {
      const url = URL.createObjectURL(file);
      return url;
    });

    const newPost: Post = {
      id: `post_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      userId: user.id,
      userName: user.name,
      userAvatar: user.avatar,
      text: postData.text,
      media: mediaUrls,
      type: postData.type,
      date: new Date().toISOString(),
      reactions: [],
      comments: [],
      isBookmarked: false,
      tags: extractTags(postData.text),
      likes: 0,
      views: 0,
      bookmarks: []
    };


    setPosts(prev => {
      const updated = [newPost, ...prev];
      saveToStorage('tutoring_posts', updated);
      return updated;
    });

    if (socketRef.current && isConnected) {
      socketRef.current.emit('createPost', newPost);
    }
  };

  const addReaction = (postId: string, reactionType: string) => {
    if (!user) return;

    setPosts(prev => {
      const updated = prev.map(post => {
        if (post.id === postId) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ä–µ–∞–∫—Ü–∏—è –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const existingReaction = post.reactions.find(r => r.userId === user.id);
          
          let newReactions = [...post.reactions];
          let newLikes = post.likes || 0;
          
          if (existingReaction) {
            if (existingReaction.type === reactionType) {
              // –£–±–∏—Ä–∞–µ–º —Ä–µ–∞–∫—Ü–∏—é
              newReactions = post.reactions.filter(r => r.userId !== user.id);
              newLikes = Math.max(0, newLikes - 1);
            } else {
              // –ú–µ–Ω—è–µ–º —Ç–∏–ø —Ä–µ–∞–∫—Ü–∏–∏
              existingReaction.type = reactionType as 'like' | 'love' | 'smile' | 'thumbsup';
            }
          } else {
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ä–µ–∞–∫—Ü–∏—é
            newReactions.push({
              id: `reaction_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
              userId: user.id,
              type: reactionType as 'like' | 'love' | 'smile' | 'thumbsup',
              date: new Date().toISOString()
            });
            newLikes++;
          }

          return { ...post, reactions: newReactions, likes: newLikes };
        }
        return post;
      });

      saveToStorage('tutoring_posts', updated);
      return updated;
    });

    if (socketRef.current && isConnected) {
      socketRef.current.emit('addReaction', { postId, reactionType, userId: user.id });
    }
  };

  const addComment = (postId: string, commentText: string) => {
    if (!user) return;

    const newComment: Comment = {
      id: `comment_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      userId: user.id,
      userName: user.name,
      userAvatar: user.avatar,
      text: commentText,
      date: new Date().toISOString()
    };

    setPosts(prev => {
      const updated = prev.map(post => 
        post.id === postId 
          ? { ...post, comments: [...post.comments, newComment] }
          : post
      );
      saveToStorage('tutoring_posts', updated);
      return updated;
    });

    if (socketRef.current && isConnected) {
      socketRef.current.emit('addComment', { postId, comment: newComment });
    }
  };

  const sharePost = (postId: string) => {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ª–æ–≥–∏–∫–∞ —à–∞—Ä–∏–Ω–≥–∞
  };

  const bookmarkPost = (postId: string) => {
    if (!user) return;

    setPosts(prev => {
      const updated = prev.map(post => {
        if (post.id === postId) {
          const bookmarks = post.bookmarks || [];
          const bookmarkIndex = bookmarks.indexOf(user.id);
          
          let newBookmarks = [...bookmarks];
          if (bookmarkIndex === -1) {
            newBookmarks.push(user.id);
          } else {
            newBookmarks.splice(bookmarkIndex, 1);
          }
          
          return { ...post, bookmarks: newBookmarks };
        }
        return post;
      });
      saveToStorage('tutoring_posts', updated);
      return updated;
    });

    if (socketRef.current && isConnected) {
      socketRef.current.emit('bookmarkPost', { postId, userId: user.id });
    }
  };

  const editPost = (postId: string, newText: string) => {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–≥–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞
    const extractTags = (text: string) => {
      if (!text) return [];
      const hashtagRegex = /#[\w–∞-—è—ë]+/gi;
      const matches = text.match(hashtagRegex);
      return matches ? [...new Set(matches.map(tag => tag.toLowerCase()))] : [];
    };

    setPosts(prev => {
      const updated = prev.map(post => 
        post.id === postId 
          ? { 
              ...post, 
              text: newText, 
              tags: extractTags(newText),
              editedAt: new Date().toISOString()
            }
          : post
      );
      saveToStorage('tutoring_posts', updated);
      return updated;
    });

    if (socketRef.current && isConnected) {
      socketRef.current.emit('editPost', { postId, newText });
    }
  };

  const deletePost = (postId: string) => {
    setPosts(prev => {
      const updated = prev.filter(post => post.id !== postId);
      saveToStorage('tutoring_posts', updated);
      return updated;
    });

    if (socketRef.current && isConnected) {
      socketRef.current.emit('deletePost', { postId });
    }
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞–º–∏
  const deleteChat = (chatId: string) => {
    console.log('deleteChat called with chatId:', chatId);
    console.log('Current chats count:', chats.length);
    
    setChats(prev => {
      const chatToDelete = prev.find(chat => chat.id === chatId);
      if (!chatToDelete) {
        console.warn('Chat not found for deletion:', chatId);
        return prev;
      }
      
      const updated = prev.filter(chat => chat.id !== chatId);
      console.log(`Chat ${chatId} removed. New count: ${updated.length}`);
      saveToStorage('tutoring_chats', updated);
      return updated;
    });

    if (socketRef.current && isConnected) {
      console.log('Sending deleteChat event to server');
      socketRef.current.emit('deleteChat', { chatId });
    } else {
      console.warn('Socket not connected, chat deletion not synced to server');
    }
  };

  const markChatAsRead = (chatId: string) => {
    setChats(prev => {
      const updated = prev.map(chat => 
        chat.id === chatId 
          ? { ...chat, messages: chat.messages.map(msg => ({ ...msg, isRead: true })) }
          : chat
      );
      saveToStorage('tutoring_chats', updated);
      return updated;
    });

    if (socketRef.current && isConnected) {
      socketRef.current.emit('markChatAsRead', { chatId });
    }
  };

  const clearChatMessages = (chatId: string) => {
    setChats(prev => {
      const updated = prev.map(chat => 
        chat.id === chatId 
          ? { ...chat, messages: [] }
          : chat
      );
      saveToStorage('tutoring_chats', updated);
      return updated;
    });

    if (socketRef.current && isConnected) {
      socketRef.current.emit('clearChatMessages', { chatId });
    }
  };

  const archiveChat = (chatId: string) => {
    setChats(prev => {
      const updated = prev.map(chat => 
        chat.id === chatId 
          ? { ...chat, archived: true }
          : chat
      );
      saveToStorage('tutoring_chats', updated);
      return updated;
    });

    if (socketRef.current && isConnected) {
      socketRef.current.emit('archiveChat', { chatId });
    }
  };

  const unarchiveChat = (chatId: string) => {
    setChats(prev => {
      const updated = prev.map(chat => 
        chat.id === chatId 
          ? { ...chat, archived: false }
          : chat
      );
      saveToStorage('tutoring_chats', updated);
      return updated;
    });

    if (socketRef.current && isConnected) {
      socketRef.current.emit('unarchiveChat', { chatId });
    }
  };

  const loadChatsFromServer = async () => {
    try {
      console.log('üîÑ Loading chats from server:', `${SERVER_URL}/api/sync`);
      const response = await fetch(`${SERVER_URL}/api/sync`);
      
      if (response.ok) {
        const contentType = response.headers.get('content-type');
        if (contentType && contentType.includes('application/json')) {
          const data = await response.json();
          if (data.chats) {
            console.log('‚úÖ Loaded chats from server:', data.chats.length);
            setChats(data.chats);
            saveToStorage('tutoring_chats', data.chats);
          }
        } else {
          console.warn('‚ö†Ô∏è Server returned non-JSON response, using local chats');
        }
      } else {
        console.error('‚ùå Failed to load chats from server:', response.status, response.statusText);
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Error loading chats from server, using local chats:', error);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const deleteUserData = (userId: string) => {
    console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
    
    // –£–¥–∞–ª—è–µ–º —Å–ª–æ—Ç—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    setTimeSlots(prev => {
      const updated = prev.filter(slot => slot.teacherId !== userId);
      saveToStorage('tutoring_timeSlots', updated);
      return updated;
    });

    // –£–¥–∞–ª—è–µ–º —É—Ä–æ–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    setLessons(prev => {
      const updated = prev.filter(lesson => 
        lesson.teacherId !== userId && lesson.studentId !== userId
      );
      saveToStorage('tutoring_lessons', updated);
      return updated;
    });

    // –£–¥–∞–ª—è–µ–º —á–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    setChats(prev => {
      const updated = prev.filter(chat => 
        !chat.participants.includes(userId)
      );
      saveToStorage('tutoring_chats', updated);
      return updated;
    });

    // –£–¥–∞–ª—è–µ–º –ø–æ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    setPosts(prev => {
      const updated = prev.filter(post => post.userId !== userId);
      saveToStorage('tutoring_posts', updated);
      return updated;
    });

    // –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    setNotifications(prev => {
      const updated = prev.filter(notification => notification.userId !== userId);
      saveToStorage('tutoring_notifications', updated);
      return updated;
    });

    // –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (user?.role === 'teacher') {
      setTeacherProfiles(prev => {
        const updated = { ...prev };
        delete updated[userId];
        saveToStorage('tutoring_teacherProfiles', updated);
        return updated;
      });
    } else if (user?.role === 'student') {
      setStudentProfiles(prev => {
        const updated = { ...prev };
        delete updated[userId];
        saveToStorage('tutoring_studentProfiles', updated);
        return updated;
      });
    }

    // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ–±—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
    setAllUsers(prev => {
      const updated = prev.filter(u => u.id !== userId);
      saveToStorage('tutoring_users', updated);
      return updated;
    });

    console.log('‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–¥–∞–ª–µ–Ω—ã');
  };

  return (
    <DataContext.Provider
      value={{
        timeSlots,
        lessons,
        chats,
        posts,
        createTimeSlot,
        bookLesson,
        cancelLesson,
        rescheduleLesson,
        getFilteredSlots,
        sendMessage,
        sendMessageToUser,
        getOrCreateChat,
        clearAllData,
        isConnected,
        completeLesson,
        studentProfiles,
        updateStudentProfile,
        deleteSlot,
        createSlot, // —Ç–µ–ø–µ—Ä—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç 4 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
        allUsers,
        setAllUsers: (users: User[]) => {
          setAllUsers(users);
          localStorage.setItem('tutoring_users', JSON.stringify(users));
          
          // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –∫–ª—é—á–µ
          const teachers = users.filter((u: any) => u.role === 'teacher');
          if (teachers.length > 0) {
            const registeredTeachers = teachers.map(teacher => ({
              ...teacher,
              isRegistered: true,
              isOnline: false, // –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞
              lastSeen: new Date().toISOString()
            }));
            localStorage.setItem('tutoring_registeredTeachers', JSON.stringify(registeredTeachers));
          }
        },
        refreshUsers, // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        loadRegisteredTeachers, // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞)
        refreshAllData, // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
        forceSyncData, // –î–æ–±–∞–≤–ª–µ–Ω–æ
        uploadLocalDataToServer, // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        deleteUser, // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        teacherProfiles,
        updateTeacherProfile, // –¥–æ–±–∞–≤–ª–µ–Ω–æ
        socketRef,
        loadInitialData, // –¥–æ–±–∞–≤–ª–µ–Ω–æ
        // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–ø–∏—Å—è–º–∏
        createPost,
        addReaction,
        addComment,
        sharePost,
        bookmarkPost,
        editPost,
        deletePost,
        // –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ—Å—Ç–æ–≤
        searchPosts: (filters: SearchFilters) => {
          if (socketRef.current && isConnected) {
            socketRef.current.emit('searchPosts', filters);
          }
        },
        getPostsByUser: (userId: string) => {
          return posts.filter(post => post.userId === userId);
        },
        getBookmarkedPosts: (userId: string) => {
          return posts.filter(post => post.bookmarks?.includes(userId));
        },
        // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        notifications,
        subscribeToNotifications: (userId: string) => {
          if (socketRef.current && isConnected) {
            socketRef.current.emit('subscribeNotifications', userId);
          }
        },
        unsubscribeFromNotifications: (userId: string) => {
          if (socketRef.current && isConnected) {
            socketRef.current.emit('unsubscribeNotifications', userId);
          }
        },
        markNotificationAsRead: (notificationId: string) => {
          setNotifications(prev => {
            const updated = prev.map(n => 
              n.id === notificationId 
                ? { ...n, isRead: true, readAt: new Date().toISOString() }
                : n
            );
            saveToStorage('tutoring_notifications', updated);
            return updated;
          });
          
          if (socketRef.current && isConnected) {
            socketRef.current.emit('markNotificationAsRead', notificationId);
          }
        },
        markAllNotificationsAsRead: (userId: string) => {
          setNotifications(prev => {
            const updated = prev.map(n => 
              n.userId === userId 
                ? { ...n, isRead: true, readAt: new Date().toISOString() }
                : n
            );
            saveToStorage('tutoring_notifications', updated);
            return updated;
          });
          
          if (socketRef.current && isConnected) {
            socketRef.current.emit('markAllNotificationsAsRead', userId);
          }
        },
        deleteNotification: (notificationId: string) => {
          setNotifications(prev => {
            const updated = prev.filter(n => n.id !== notificationId);
            saveToStorage('tutoring_notifications', updated);
            return updated;
          });
        },
        // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞–º–∏
        deleteChat,
        markChatAsRead,
        clearChatMessages,
        archiveChat,
        unarchiveChat,
        loadChatsFromServer,
        deleteUserData,
      }}
    >
      {children}
    </DataContext.Provider>
  );
};