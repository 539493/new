#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –¥–µ–ø–ª–æ—é –Ω–∞ Render...\n');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
const requiredFiles = [
  'package.json',
  'render.yaml',
  'backend/production-server-simple.cjs',
  'dist/index.html',
  'dist/assets/'
];

let allFilesExist = true;

console.log('üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤:');
requiredFiles.forEach(file => {
  const exists = fs.existsSync(file);
  console.log(`  ${exists ? '‚úÖ' : '‚ùå'} ${file}`);
  if (!exists) allFilesExist = false;
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ package.json
console.log('\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ package.json:');
try {
  const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
  
  const hasStartScript = packageJson.scripts && packageJson.scripts.start;
  console.log(`  ${hasStartScript ? '‚úÖ' : '‚ùå'} start script`);
  
  const hasBuildScript = packageJson.scripts && packageJson.scripts.build;
  console.log(`  ${hasBuildScript ? '‚úÖ' : '‚ùå'} build script`);
  
  const hasDependencies = packageJson.dependencies && Object.keys(packageJson.dependencies).length > 0;
  console.log(`  ${hasDependencies ? '‚úÖ' : '‚ùå'} dependencies`);
  
  const hasEngines = packageJson.engines && packageJson.engines.node;
  console.log(`  ${hasEngines ? '‚úÖ' : '‚ùå'} engines.node`);
  
} catch (error) {
  console.log('  ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è package.json');
  allFilesExist = false;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ render.yaml
console.log('\n‚öôÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ render.yaml:');
try {
  const renderYaml = fs.readFileSync('render.yaml', 'utf8');
  
  const hasWebService = renderYaml.includes('type: web');
  console.log(`  ${hasWebService ? '‚úÖ' : '‚ùå'} web service type`);
  
  const hasBuildCommand = renderYaml.includes('buildCommand');
  console.log(`  ${hasBuildCommand ? '‚úÖ' : '‚ùå'} build command`);
  
  const hasStartCommand = renderYaml.includes('startCommand');
  console.log(`  ${hasStartCommand ? '‚úÖ' : '‚ùå'} start command`);
  
  const hasHealthCheck = renderYaml.includes('healthCheckPath');
  console.log(`  ${hasHealthCheck ? '‚úÖ' : '‚ùå'} health check path`);
  
} catch (error) {
  console.log('  ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è render.yaml');
  allFilesExist = false;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ dist –ø–∞–ø–∫–∏
console.log('\nüìÇ –ü—Ä–æ–≤–µ—Ä–∫–∞ dist –ø–∞–ø–∫–∏:');
try {
  const distFiles = fs.readdirSync('dist');
  const hasIndexHtml = distFiles.includes('index.html');
  console.log(`  ${hasIndexHtml ? '‚úÖ' : '‚ùå'} index.html`);
  
  const assetsDir = fs.readdirSync('dist/assets');
  const hasJsFiles = assetsDir.some(file => file.endsWith('.js'));
  console.log(`  ${hasJsFiles ? '‚úÖ' : '‚ùå'} JavaScript files`);
  
  const hasCssFiles = assetsDir.some(file => file.endsWith('.css'));
  console.log(`  ${hasCssFiles ? '‚úÖ' : '‚ùå'} CSS files`);
  
} catch (error) {
  console.log('  ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è dist –ø–∞–ø–∫–∏');
  allFilesExist = false;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
console.log('\nüñ•Ô∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:');
try {
  const serverFile = fs.readFileSync('backend/production-server-simple.cjs', 'utf8');
  
  const hasExpress = serverFile.includes('express');
  console.log(`  ${hasExpress ? '‚úÖ' : '‚ùå'} Express.js`);
  
  const hasSocketIO = serverFile.includes('socket.io');
  console.log(`  ${hasSocketIO ? '‚úÖ' : '‚ùå'} Socket.IO`);
  
  const hasHealthEndpoint = serverFile.includes('/api/health');
  console.log(`  ${hasHealthEndpoint ? '‚úÖ' : '‚ùå'} Health endpoint`);
  
  const hasStaticFiles = serverFile.includes('express.static');
  console.log(`  ${hasStaticFiles ? '‚úÖ' : '‚ùå'} Static files serving`);
  
  const hasPortConfig = serverFile.includes('process.env.PORT');
  console.log(`  ${hasPortConfig ? '‚úÖ' : '‚ùå'} PORT environment variable`);
  
} catch (error) {
  console.log('  ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞');
  allFilesExist = false;
}

// –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
console.log('\nüìä –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞:');

if (allFilesExist) {
  console.log('üéâ –ü–†–û–ï–ö–¢ –ì–û–¢–û–í –ö –î–ï–ü–õ–û–Æ –ù–ê RENDER!');
  console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
  console.log('1. –ó–∞–∫–æ–º–º–∏—Ç—å—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è: git add . && git commit -m "Ready for deployment"');
  console.log('2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: git push origin main');
  console.log('3. –°–æ–∑–¥–∞–π—Ç–µ —Å–µ—Ä–≤–∏—Å –Ω–∞ Render.com');
  console.log('4. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π');
  console.log('5. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  console.log('6. –î–æ–∂–¥–∏—Ç–µ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–µ–ø–ª–æ—è');
} else {
  console.log('‚ùå –ü–†–û–ï–ö–¢ –ù–ï –ì–û–¢–û–í –ö –î–ï–ü–õ–û–Æ');
  console.log('\nüîß –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –≤—ã—à–µ');
}

console.log('\nüìñ –ü–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: QUICK_DEPLOY.md');
console.log('üìã –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç: DEPLOYMENT_READY.md'); 