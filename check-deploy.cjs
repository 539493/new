#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –¥–µ–ø–ª–æ—é –Ω–∞ Render...\n');

const checks = [
  {
    name: 'package.json',
    path: 'package.json',
    required: true,
    check: (content) => {
      const pkg = JSON.parse(content);
      return pkg.scripts.start && pkg.scripts.build;
    }
  },
  {
    name: 'render.yaml',
    path: 'render.yaml',
    required: true,
    check: () => true
  },
  {
    name: 'production-server-simple.cjs',
    path: 'backend/production-server-simple.cjs',
    required: true,
    check: () => true
  },
  {
    name: 'config.ts',
    path: 'src/config.ts',
    required: true,
    check: (content) => {
      return content.includes('WEBSOCKET_URL') && content.includes('SERVER_URL');
    }
  },
  {
    name: 'vite.config.ts',
    path: 'vite.config.ts',
    required: true,
    check: () => true
  },
  {
    name: 'tailwind.config.js',
    path: 'tailwind.config.js',
    required: true,
    check: () => true
  }
];

let allPassed = true;

checks.forEach(check => {
  const filePath = path.join(process.cwd(), check.path);
  
  if (!fs.existsSync(filePath)) {
    if (check.required) {
      console.log(`‚ùå ${check.name} - –ù–ï –ù–ê–ô–î–ï–ù (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª)`);
      allPassed = false;
    } else {
      console.log(`‚ö†Ô∏è  ${check.name} - –ù–ï –ù–ê–ô–î–ï–ù (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª)`);
    }
    return;
  }

  try {
    const content = fs.readFileSync(filePath, 'utf8');
    if (check.check(content)) {
      console.log(`‚úÖ ${check.name} - OK`);
    } else {
      console.log(`‚ùå ${check.name} - –ù–ï –ü–†–û–®–ï–õ –ü–†–û–í–ï–†–ö–£`);
      allPassed = false;
    }
  } catch (error) {
    console.log(`‚ùå ${check.name} - –û–®–ò–ë–ö–ê –ß–¢–ï–ù–ò–Ø: ${error.message}`);
    allPassed = false;
  }
});

console.log('\nüìã –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
try {
  const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
  const requiredDeps = ['express', 'socket.io', 'cors', 'react', 'vite'];
  const missingDeps = requiredDeps.filter(dep => !packageJson.dependencies[dep]);
  
  if (missingDeps.length === 0) {
    console.log('‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ - OK');
  } else {
    console.log(`‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: ${missingDeps.join(', ')}`);
    allPassed = false;
  }
} catch (error) {
  console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π');
  allPassed = false;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤
try {
  const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
  const requiredScripts = ['start', 'build'];
  const missingScripts = requiredScripts.filter(script => !packageJson.scripts[script]);
  
  if (missingScripts.length === 0) {
    console.log('‚úÖ –°–∫—Ä–∏–ø—Ç—ã package.json - OK');
  } else {
    console.log(`‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–∫—Ä–∏–ø—Ç—ã: ${missingScripts.join(', ')}`);
    allPassed = false;
  }
} catch (error) {
  console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤');
  allPassed = false;
}

console.log('\n' + '='.repeat(50));

if (allPassed) {
  console.log('üéâ –ü–†–û–ï–ö–¢ –ì–û–¢–û–í –ö –î–ï–ü–õ–û–Æ –ù–ê RENDER!');
  console.log('\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
  console.log('1. git add .');
  console.log('2. git commit -m "Ready for Render deployment"');
  console.log('3. git push origin main');
  console.log('4. –°–æ–∑–¥–∞–π—Ç–µ Web Service –Ω–∞ render.com');
  console.log('5. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –≤–∞—à GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π');
  console.log('6. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Build Command: npm install && npm run build');
  console.log('7. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Start Command: npm start');
} else {
  console.log('‚ùå –ü–†–û–ï–ö–¢ –ù–ï –ì–û–¢–û–í –ö –î–ï–ü–õ–û–Æ');
  console.log('–ò—Å–ø—Ä–∞–≤—å—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤—ã—à–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º.');
}

console.log('\nüìñ –ü–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: RENDER_DEPLOY.md'); 