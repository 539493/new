#!/usr/bin/env node

const https = require('https');

// URL –≤–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ Render (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à)
const APP_URL = 'https://tutoring-platform.onrender.com';

function checkDeployStatus() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–µ–ø–ª–æ—è –Ω–∞ Render...');
  console.log(`üì° URL: ${APP_URL}`);
  
  const options = {
    hostname: 'tutoring-platform.onrender.com',
    port: 443,
    path: '/api/health',
    method: 'GET',
    timeout: 10000
  };

  const req = https.request(options, (res) => {
    console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${res.statusCode}`);
    
    let data = '';
    res.on('data', (chunk) => {
      data += chunk;
    });
    
    res.on('end', () => {
      try {
        const response = JSON.parse(data);
        console.log('üìä –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:');
        console.log(JSON.stringify(response, null, 2));
        
        if (res.statusCode === 200) {
          console.log('üéâ –î–µ–ø–ª–æ–π —É—Å–ø–µ—à–µ–Ω! –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.');
        } else {
          console.log('‚ö†Ô∏è  –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã.');
        }
      } catch (e) {
        console.log('üìÑ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (–Ω–µ JSON):', data);
      }
    });
  });

  req.on('error', (e) => {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', e.message);
    console.log('üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
    console.log('   - –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –µ—â–µ –¥–µ–ø–ª–æ–∏—Ç—Å—è');
    console.log('   - –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é');
    console.log('   - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL');
  });

  req.on('timeout', () => {
    console.log('‚è∞ –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
    req.destroy();
  });

  req.end();
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
checkDeployStatus();

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
setInterval(checkDeployStatus, 30000); 