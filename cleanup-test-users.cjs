// –°–∫—Ä–∏–ø—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å Render —Å–µ—Ä–≤–µ—Ä–∞
const https = require('https');

const RENDER_URL = 'https://nauchi.onrender.com';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
const makeRequest = (path, method = 'GET', data = null) => {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'nauchi.onrender.com',
      port: 443,
      path: path,
      method: method,
      headers: {
        'Content-Type': 'application/json',
        'User-Agent': 'Cleanup-Script/1.0'
      }
    };

    const req = https.request(options, (res) => {
      let responseData = '';
      
      res.on('data', (chunk) => {
        responseData += chunk;
      });
      
      res.on('end', () => {
        try {
          const parsed = JSON.parse(responseData);
          resolve({ status: res.statusCode, data: parsed });
        } catch (e) {
          resolve({ status: res.statusCode, data: responseData });
        }
      });
    });

    req.on('error', (err) => {
      reject(err);
    });

    if (data) {
      req.write(JSON.stringify(data));
    }
    
    req.end();
  });
};

// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const getAllUsers = async () => {
  try {
    console.log('üìã –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    const response = await makeRequest('/api/users');
    
    if (response.status === 200) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${response.data.length}`);
      return response.data;
    } else {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${response.status}`);
      return [];
    }
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    return [];
  }
};

// –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const deleteUser = async (userId) => {
  try {
    console.log(`üóëÔ∏è  –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}...`);
    const response = await makeRequest(`/api/users/${userId}`, 'DELETE');
    
    if (response.status === 200) {
      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —É–¥–∞–ª–µ–Ω`);
      return true;
    } else {
      console.log(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${response.status}`);
      return false;
    }
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${error.message}`);
    return false;
  }
};

// –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const isTestUser = (user) => {
  const testPatterns = [
    /test/i,
    /demo/i,
    /example/i,
    /sample/i,
    /temp/i,
    /temporary/i,
    /123/i,
    /admin/i,
    /root/i,
    /user/i,
    /student/i,
    /teacher/i
  ];
  
  const name = user.name || user.username || user.email || '';
  const email = user.email || '';
  
  return testPatterns.some(pattern => 
    pattern.test(name) || pattern.test(email)
  );
};

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
const cleanupTestUsers = async () => {
  console.log('üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...\n');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = await getAllUsers();
    
    if (users.length === 0) {
      console.log('üì≠ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }
    
    console.log('\nüë• –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
    users.forEach((user, index) => {
      console.log(`${index + 1}. ID: ${user.id}, –ò–º—è: ${user.name || 'N/A'}, Email: ${user.email || 'N/A'}, –†–æ–ª—å: ${user.role || 'N/A'}`);
    });
    
    // –ù–∞—Ö–æ–¥–∏–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const testUsers = users.filter(isTestUser);
    
    console.log(`\nüîç –ù–∞–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${testUsers.length}`);
    
    if (testUsers.length === 0) {
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }
    
    console.log('\nüóëÔ∏è  –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:');
    testUsers.forEach((user, index) => {
      console.log(`${index + 1}. ID: ${user.id}, –ò–º—è: ${user.name || 'N/A'}, Email: ${user.email || 'N/A'}`);
    });
    
    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\nüöÆ –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    let deletedCount = 0;
    
    for (const user of testUsers) {
      const success = await deleteUser(user.id);
      if (success) {
        deletedCount++;
      }
      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 500));
    }
    
    console.log(`\n‚úÖ –£–¥–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${deletedCount} –∏–∑ ${testUsers.length}`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const remainingUsers = await getAllUsers();
    console.log(`\nüë• –û—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${remainingUsers.length}`);
    
  } catch (error) {
    console.log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
  }
};

// –ó–∞–ø—É—Å–∫
cleanupTestUsers();
