// –ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
const https = require('https');

const makeRequest = (path, method = 'GET') => {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'nauchi.onrender.com',
      port: 443,
      path: path,
      method: method,
      headers: {
        'Content-Type': 'application/json'
      }
    };

    const req = https.request(options, (res) => {
      let data = '';
      res.on('data', chunk => data += chunk);
      res.on('end', () => {
        try {
          resolve({ status: res.statusCode, data: JSON.parse(data) });
        } catch (e) {
          resolve({ status: res.statusCode, data: data });
        }
      });
    });

    req.on('error', reject);
    req.end();
  });
};

const cleanupData = async () => {
  console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...\n');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('üìã –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    const usersResponse = await makeRequest('/api/users');
    
    if (usersResponse.status === 200) {
      const users = Array.isArray(usersResponse.data) ? usersResponse.data : [];
      console.log(`üë• –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);
      
      users.forEach((user, index) => {
        console.log(`${index + 1}. ${user.name || 'N/A'} (${user.email || 'N/A'}) - ${user.role || 'N/A'}`);
      });
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ—Ç—ã –≤—Ä–µ–º–µ–Ω–∏
    console.log('\n‚è∞ –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ—Ç—ã –≤—Ä–µ–º–µ–Ω–∏...');
    const slotsResponse = await makeRequest('/api/time-slots');
    
    if (slotsResponse.status === 200) {
      const slots = Array.isArray(slotsResponse.data) ? slotsResponse.data : [];
      console.log(`‚è∞ –ù–∞–π–¥–µ–Ω–æ —Å–ª–æ—Ç–æ–≤: ${slots.length}`);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å–ª–æ—Ç–æ–≤
      slots.slice(0, 10).forEach((slot, index) => {
        console.log(`${index + 1}. –£—á–∏—Ç–µ–ª—å: ${slot.teacherId}, –í—Ä–µ–º—è: ${slot.startTime || 'N/A'}, –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω: ${slot.isBooked ? '–î–∞' : '–ù–µ—Ç'}`);
      });
      
      if (slots.length > 10) {
        console.log(`... –∏ –µ—â–µ ${slots.length - 10} —Å–ª–æ—Ç–æ–≤`);
      }
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ —É—á–∏—Ç–µ–ª–µ–π
    console.log('\nüë®‚Äçüè´ –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ —É—á–∏—Ç–µ–ª–µ–π...');
    const profilesResponse = await makeRequest('/api/teacher-profiles');
    
    if (profilesResponse.status === 200) {
      const profiles = Array.isArray(profilesResponse.data) ? profilesResponse.data : [];
      console.log(`üë®‚Äçüè´ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Ñ–∏–ª–µ–π: ${profiles.length}`);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –ø—Ä–æ—Ñ–∏–ª–µ–π
      profiles.slice(0, 10).forEach((profile, index) => {
        console.log(`${index + 1}. ${profile.name || 'N/A'} - ${profile.subjects || 'N/A'}`);
      });
      
      if (profiles.length > 10) {
        console.log(`... –∏ –µ—â–µ ${profiles.length - 10} –ø—Ä–æ—Ñ–∏–ª–µ–π`);
      }
    }
    
    console.log('\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!');
    console.log('\nüí° –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ API:');
    console.log('   DELETE /api/users/{id}');
    console.log('   DELETE /api/time-slots/{id}');
    console.log('   DELETE /api/teacher-profiles/{id}');
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }
};

cleanupData();
