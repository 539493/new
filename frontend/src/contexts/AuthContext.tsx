import React, { createContext, useContext, useState, ReactNode, useEffect } from 'react';
import { v4 as uuidv4 } from 'uuid';
import { User, StudentProfile, TeacherProfile } from '../types';
import { SERVER_URL } from '../config';
import { useData } from './DataContext';

interface AuthContextType {
  user: User | null;
  login: (email: string, password: string) => Promise<boolean>;
  register: (email: string, password: string, name: string, nickname: string, role: 'student' | 'teacher', phone: string) => Promise<boolean>;
  logout: () => void;
  updateProfile: (profile: StudentProfile | TeacherProfile) => void;
  clearAllUsers: () => void;
  deleteAccount: () => Promise<boolean>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

interface AuthProviderProps {
  children: ReactNode;
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å localStorage
const loadUsersFromStorage = (): User[] => {
  try {
    const saved = localStorage.getItem('tutoring_users');
    return saved ? JSON.parse(saved) : [];
  } catch (e) {
    return [];
  }
};

const saveUsersToStorage = (users: User[]) => {
  try {
    localStorage.setItem('tutoring_users', JSON.stringify(users));
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ storage –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è DataContext
    window.dispatchEvent(new StorageEvent('storage', {
      key: 'tutoring_users',
      newValue: JSON.stringify(users),
      oldValue: localStorage.getItem('tutoring_users'),
      storageArea: localStorage
    }));
    
    // –¢–∞–∫–∂–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
    window.dispatchEvent(new CustomEvent('customStorage', {
      detail: {
        key: 'tutoring_users',
        newValue: JSON.stringify(users),
        oldValue: localStorage.getItem('tutoring_users')
      }
    }));
  } catch (e) {
    // Error saving users to localStorage
  }
};

const saveUserToStorage = (user: User) => {
  try {
    localStorage.setItem('tutoring_currentUser', JSON.stringify(user));
  } catch (e) {
    // Error saving current user to localStorage
  }
};

const loadUserFromStorage = (): User | null => {
  try {
    const saved = localStorage.getItem('tutoring_currentUser');
    return saved ? JSON.parse(saved) : null;
  } catch (e) {
    return null;
  }
};

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–µ–π –ø—Ä–æ—Ñ–∏–ª–µ–π –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
const clearLocalProfileCaches = () => {
  try {
    const keysToClear = [
      'tutoring_teacherProfiles',
      'tutoring_studentProfiles',
      'tutoring_timeSlots',
      'tutoring_lessons',
      'tutoring_chats',
      'tutoring_posts',
      'tutoring_notifications'
    ];

    keysToClear.forEach((key) => {
      localStorage.removeItem(key);
      // –°–æ–æ–±—â–∞–µ–º DataContext –≤ —ç—Ç–æ–π –∂–µ –≤–∫–ª–∞–¥–∫–µ
      window.dispatchEvent(new CustomEvent('customStorage', {
        detail: {
          key,
          newValue: null,
          oldValue: null
        }
      }));
    });
  } catch (e) {
  }
};

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  const [user, setUser] = useState<User | null>(() => {
    try {
      return loadUserFromStorage();
    } catch (error) {
      return null;
    }
  });
  
  const [isInitialized, setIsInitialized] = useState(false);
  
  // –ü–æ–ª—É—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é deleteUserData –∏–∑ DataContext
  let deleteUserData: ((userId: string) => void) | null = null;
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º try-catch, —Ç–∞–∫ –∫–∞–∫ DataContext –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    const dataContext = React.useContext(require('./DataContext').DataContext);
    if (dataContext) {
      deleteUserData = dataContext.deleteUserData;
    }
  } catch (error) {
    // DataContext –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–µ–≥–æ
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    const initializeAuth = async () => {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
        console.log('üîç Checking server availability...');
        const serverCheck = await fetch(`${SERVER_URL}/api/health`);
        
        if (serverCheck.ok) {
          console.log('‚úÖ Server is available');
        } else {
          console.warn('‚ö†Ô∏è Server health check failed');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ —Å–∏—Å—Ç–µ–º–µ
        const users = loadUsersFromStorage();
        console.log('üë• Loaded users from storage:', users.length);
        
        setIsInitialized(true);
      } catch (error) {
        console.error('‚ùå Server not available:', error);
        console.log('üîÑ Will retry connection in DataContext...');
        setIsInitialized(true); // –í—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
      }
    };

    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    const timer = setTimeout(initializeAuth, 100);
    return () => clearTimeout(timer);
  }, []);

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —ç–∫—Ä–∞–Ω, –ø–æ–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
  if (!isInitialized) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...</p>
        </div>
      </div>
    );
  }

  const login = async (email: string, password: string): Promise<boolean> => {
    // –°–∏–º—É–ª—è—Ü–∏—è API –≤—ã–∑–æ–≤–∞
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    const users = loadUsersFromStorage();
    const foundUser = users.find(u => u.email === email);
    
    if (foundUser) {
      setUser(foundUser);
      saveUserToStorage(foundUser);
      return true;
    }
    
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
    alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.');
    return false;
  };

  const register = async (
    email: string, 
    password: string, 
    name: string, 
    nickname: string, 
    role: 'student' | 'teacher',
    phone: string
  ): Promise<boolean> => {
    try {
      // –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∫—ç—à–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–µ–π
      clearLocalProfileCaches();
      
      // –°–Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
      console.log('üåê SERVER_URL value:', SERVER_URL);
      console.log('üåê Full registration URL:', `${SERVER_URL}/api/register`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–≤–æ–π–Ω—ã—Ö —Å–ª–µ—à–µ–π
      const registrationUrl = `${SERVER_URL}/api/register`;
      if (registrationUrl.includes('//api/')) {
        console.error('‚ùå URL contains double slashes:', registrationUrl);
        alert('–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ URL. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
        return false;
      }
      
      console.log('üì§ Registration data:', { email, name, nickname, role, phone });
      
      const response = await fetch(`${SERVER_URL}/api/register`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          email,
          password,
          name,
          nickname,
          role,
          phone
        })
      });
      
      console.log('üì° Server response status:', response.status);
      console.log('üì° Server response ok:', response.ok);

      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå Server registration failed:', response.status, errorText);
        
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å JSON –æ—à–∏–±–∫–∏
        try {
          const errorData = JSON.parse(errorText);
          console.error('‚ùå Server error details:', errorData);
          alert(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${errorData.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
        } catch {
          console.error('‚ùå Server error (non-JSON):', errorText);
          alert(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${errorText || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
        }
        
        // –ù–ï –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–µ—Ä
        throw new Error('Server registration failed - server is required');
      }

      const serverUser = await response.json();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
      const users = loadUsersFromStorage();
      const updatedUsers = [...users, serverUser];
      saveUsersToStorage(updatedUsers);
      setUser(serverUser);
      saveUserToStorage(serverUser);
      
      // –£–ë–†–ê–ù–û: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
      // –î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é—Ç—Å—è —á–µ—Ä–µ–∑ WebSocket —Å–æ–±—ã—Ç–∏—è –∏ —è–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      
      return true;
    } catch (error) {
      // –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –∏ –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
      console.error('‚ùå Server registration failed:', error);
      alert('–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      return false;
    }
  };

  const logout = () => {
    setUser(null);
    localStorage.removeItem('tutoring_currentUser');
    // –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∫—ç—à–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å "–ø—Ä–∏–ª–∏–ø–∞–Ω–∏–µ" —Å—Ç–∞—Ä–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
    clearLocalProfileCaches();
  };

  const updateProfile = (profile: StudentProfile | TeacherProfile) => {
    if (user) {
      const updatedUser = { ...user, profile, avatar: profile.avatar };
      setUser(updatedUser);
      saveUserToStorage(updatedUser);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ
      const users = loadUsersFromStorage();
      const updatedUsers = users.map(u => u.id === user.id ? updatedUser : u);
      saveUsersToStorage(updatedUsers);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      if (typeof window !== 'undefined') {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        fetch(`${SERVER_URL}/api/updateProfile`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            userId: user.id,
            profileData: profile,
            role: user.role
          })
        }).then(response => {
          if (response.ok) {
            console.log('Profile updated successfully on server');
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            const socket = (window as any).socket;
            if (socket) {
              socket.emit('profileUpdated', {
                userId: user.id,
                profileData: profile,
                role: user.role
              });
            }
          } else {
            console.error('Failed to update profile on server:', response.status);
          }
        }).catch(error => {
          console.error('Failed to update profile on server:', error);
        });
      }
    }
  };

  const clearAllUsers = () => {
    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    setUser(null);
    
    // –û—á–∏—â–∞–µ–º localStorage
    localStorage.removeItem('tutoring_users');
    localStorage.removeItem('tutoring_currentUser');
    // –¢–∞–∫–∂–µ —á–∏—Å—Ç–∏–º –ø—Ä–æ—Ñ–∏–ª–∏ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    clearLocalProfileCaches();
  };

  const deleteAccount = async (): Promise<boolean> => {
    if (!user) {
      alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return false;
    }

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
    const confirmed = window.confirm(
      '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å. –í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–µ–Ω—ã.'
    );
    
    if (!confirmed) {
      return false;
    }

    try {
      // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–µ—Ä–≤–µ—Ä–∞
      const response = await fetch(`${SERVER_URL}/api/delete-user`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          userId: user.id,
          role: user.role
        })
      });

      if (!response.ok) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–µ—Ä–≤–µ—Ä–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ');
      }

      // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
      const users = loadUsersFromStorage();
      const updatedUsers = users.filter(u => u.id !== user.id);
      saveUsersToStorage(updatedUsers);

      // –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (user.role === 'teacher') {
        const teacherProfiles = JSON.parse(localStorage.getItem('tutoring_teacherProfiles') || '{}');
        delete teacherProfiles[user.id];
        localStorage.setItem('tutoring_teacherProfiles', JSON.stringify(teacherProfiles));
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è DataContext
        window.dispatchEvent(new CustomEvent('customStorage', {
          detail: {
            key: 'tutoring_teacherProfiles',
            newValue: JSON.stringify(teacherProfiles)
          }
        }));
      } else if (user.role === 'student') {
        const studentProfiles = JSON.parse(localStorage.getItem('tutoring_studentProfiles') || '{}');
        delete studentProfiles[user.id];
        localStorage.setItem('tutoring_studentProfiles', JSON.stringify(studentProfiles));
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è DataContext
        window.dispatchEvent(new CustomEvent('customStorage', {
          detail: {
            key: 'tutoring_studentProfiles',
            newValue: JSON.stringify(studentProfiles)
          }
        }));
      }

      // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ DataContext
      if (deleteUserData) {
        deleteUserData(user.id);
      } else {
        // Fallback: —É–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ localStorage
        const timeSlots = JSON.parse(localStorage.getItem('tutoring_timeSlots') || '[]');
        const updatedTimeSlots = timeSlots.filter((slot: any) => slot.teacherId !== user.id);
        localStorage.setItem('tutoring_timeSlots', JSON.stringify(updatedTimeSlots));

        const lessons = JSON.parse(localStorage.getItem('tutoring_lessons') || '[]');
        const updatedLessons = lessons.filter((lesson: any) => 
          lesson.teacherId !== user.id && lesson.studentId !== user.id
        );
        localStorage.setItem('tutoring_lessons', JSON.stringify(updatedLessons));

        const chats = JSON.parse(localStorage.getItem('tutoring_chats') || '[]');
        const updatedChats = chats.filter((chat: any) => 
          !chat.participants.includes(user.id)
        );
        localStorage.setItem('tutoring_chats', JSON.stringify(updatedChats));

        const posts = JSON.parse(localStorage.getItem('tutoring_posts') || '[]');
        const updatedPosts = posts.filter((post: any) => post.userId !== user.id);
        localStorage.setItem('tutoring_posts', JSON.stringify(updatedPosts));

        const notifications = JSON.parse(localStorage.getItem('tutoring_notifications') || '[]');
        const updatedNotifications = notifications.filter((notification: any) => 
          notification.userId !== user.id
        );
        localStorage.setItem('tutoring_notifications', JSON.stringify(updatedNotifications));
      }

      // –í—ã—Ö–æ–¥–∏–º –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —á–∏—Å—Ç–∏–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∫—ç—à–∏
      logout();

      alert('–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞:', error);
      alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞');
      return false;
    }
  };

  return (
    <AuthContext.Provider value={{ user, login, register, logout, updateProfile, clearAllUsers, deleteAccount }}>
      {children}
    </AuthContext.Provider>
  );
};