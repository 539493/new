#!/usr/bin/env node

const http = require('http');
const https = require('https');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ HTTP/HTTPS –∑–∞–ø—Ä–æ—Å–æ–≤
function makeRequest(url) {
  return new Promise((resolve, reject) => {
    const client = url.startsWith('https') ? https : http;
    
    const req = client.get(url, (res) => {
      let data = '';
      res.on('data', chunk => data += chunk);
      res.on('end', () => {
        try {
          const json = JSON.parse(data);
          resolve({ status: res.statusCode, data: json });
        } catch (e) {
          resolve({ status: res.statusCode, data: data });
        }
      });
    });
    
    req.on('error', reject);
    req.setTimeout(10000, () => {
      req.destroy();
      reject(new Error('Request timeout'));
    });
  });
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoints
async function testEndpoints(baseUrl) {
  console.log(`üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ${baseUrl}...`);
  
  const tests = [
    { name: 'Health Check', url: `${baseUrl}/api/health` },
    { name: 'Users API', url: `${baseUrl}/api/users` },
    { name: 'Teachers API', url: `${baseUrl}/api/teachers` },
    { name: 'Lessons API', url: `${baseUrl}/api/lessons` },
    { name: 'Sync API', url: `${baseUrl}/api/sync` }
  ];
  
  for (const test of tests) {
    try {
      console.log(`  üì° ${test.name}...`);
      const result = await makeRequest(test.url);
      
      if (result.status === 200) {
        console.log(`    ‚úÖ ${test.name}: OK (${result.status})`);
        if (test.name === 'Health Check' && result.data.status) {
          console.log(`    üìä Connected clients: ${result.data.connectedClients}`);
          console.log(`    üìÖ Time slots: ${result.data.timeSlots}`);
          console.log(`    üìö Lessons: ${result.data.lessons}`);
        }
      } else {
        console.log(`    ‚ùå ${test.name}: Failed (${result.status})`);
      }
    } catch (error) {
      console.log(`    ‚ùå ${test.name}: Error - ${error.message}`);
    }
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  const args = process.argv.slice(2);
  const baseUrl = args[0] || 'http://localhost:5000';
  
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—Å—Ç–≤–∞');
  console.log('=' .repeat(60));
  
  await testEndpoints(baseUrl);
  
  console.log('=' .repeat(60));
  console.log('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
  console.log('');
  console.log('üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:');
  console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
  console.log('2. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å');
  console.log('3. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–∞–∫ —É—á–µ–Ω–∏–∫ –Ω–∞ –¥—Ä—É–≥–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ');
  console.log('4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤–∏–¥—è—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞');
  console.log('5. –°–æ–∑–¥–∞–π—Ç–µ —Å–ª–æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –∏ –∑–∞–±—Ä–æ–Ω–∏—Ä—É–π—Ç–µ –µ–≥–æ');
  console.log('6. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á–∞—Ç –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏');
}

if (require.main === module) {
  main().catch(console.error);
}

module.exports = { testEndpoints, makeRequest };
