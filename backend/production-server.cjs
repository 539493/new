const express = require('express');
const http = require('http');
const { Server } = require('socket.io');
const cors = require('cors');
const fs = require('fs');
const path = require('path');

const app = express();
const server = http.createServer(app);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤
const allowedOrigins = [
  "http://localhost:3000",
  "http://localhost:3001",
  "http://localhost:3002",
  "http://localhost:3003",
  "http://localhost:3004",
  "http://localhost:4173",
  "http://localhost:5173", // Vite dev server
  "https://*.vercel.app",
  "https://*.onrender.com",
  "https://na-uchi.onrender.com",
  "https://nauchi.onrender.com",
  "https://tutoring-platform.vercel.app",
  "https://tutoring-platform.onrender.com",
  "https://tutoring-platform-*.onrender.com",
  "https://tutoring-platform-am88.onrender.com",
  "https://tutoring-platform-1756666331-zjfl.onrender.com"
];

app.use(cors({
  origin: function (origin, callback) {
    // –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –±–µ–∑ origin (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
    if (!origin) return callback(null, true);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ origin —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º –¥–æ–º–µ–Ω–∞–º
    const isAllowed = allowedOrigins.some(allowedOrigin => {
      if (allowedOrigin.includes('*')) {
        const pattern = allowedOrigin.replace('*', '.*');
        return new RegExp(pattern).test(origin);
      }
      return allowedOrigin === origin;
    });
    
    if (isAllowed) {
      callback(null, true);
    } else {
      callback(new Error('Not allowed by CORS'));
    }
  },
  credentials: true,
  methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"]
}));

// Middleware –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// –°–æ–∑–¥–∞–Ω–∏–µ Socket.IO —Å–µ—Ä–≤–µ—Ä–∞
const io = new Server(server, {
  cors: {
    origin: function (origin, callback) {
      // –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –±–µ–∑ origin
      if (!origin) return callback(null, true);
      
      console.log('üîç Socket.IO CORS check for origin:', origin);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ origin —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º –¥–æ–º–µ–Ω–∞–º
      const isAllowed = allowedOrigins.some(allowedOrigin => {
        if (allowedOrigin.includes('*')) {
          const pattern = allowedOrigin.replace('*', '.*');
          return new RegExp(pattern).test(origin);
        }
        return allowedOrigin === origin;
      });
      
      console.log('‚úÖ Socket.IO CORS allowed:', isAllowed);
      
      if (isAllowed) {
        callback(null, true);
      } else {
        console.log('‚ùå Socket.IO CORS rejected for:', origin);
        callback(new Error('Not allowed by CORS'));
      }
    },
    credentials: true,
    methods: ["GET", "POST"]
  },
  transports: ['websocket', 'polling'],
  allowEIO3: true,
  pingTimeout: 60000,
  pingInterval: 25000
});

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
const DATA_FILE = path.join(__dirname, 'server_data.json');

function loadServerData() {
  try {
    console.log('Loading server data from:', DATA_FILE);
    if (fs.existsSync(DATA_FILE)) {
      const data = JSON.parse(fs.readFileSync(DATA_FILE, 'utf8'));
      console.log('üìä –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:');
      console.log(`üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π: ${Object.keys(data.teacherProfiles || {}).length}`);
      console.log(`üë®‚Äçüéì –°—Ç—É–¥–µ–Ω—Ç–æ–≤: ${Object.keys(data.studentProfiles || {}).length}`);
      console.log(`üìÖ –°–ª–æ—Ç–æ–≤: ${(data.timeSlots || []).length}`);
      console.log(`üìö –£—Ä–æ–∫–æ–≤: ${(data.lessons || []).length}`);
      return data;
    } else {
      console.log('No server data file found, creating default structure');
      return {
        teacherProfiles: {},
        studentProfiles: {},
        overbookingRequests: [],
        timeSlots: [],
        lessons: [],
        chats: [],
        posts: [],
        notifications: []
      };
    }
  } catch (error) {
    console.error('Error loading server data:', error);
    return {
      teacherProfiles: {},
      studentProfiles: {},
      overbookingRequests: [],
      timeSlots: [],
      lessons: [],
      chats: [],
      posts: [],
      notifications: []
    };
  }
}

function saveServerData(data) {
  try {
    const dataToSave = data || {
      teacherProfiles,
      studentProfiles,
      timeSlots,
      lessons,
      chats,
      overbookingRequests,
      posts,
      notifications
    };
    
    fs.writeFileSync(DATA_FILE, JSON.stringify(dataToSave, null, 2));
  } catch (error) {
    console.error('Error saving server data:', error);
  }
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
let {
  teacherProfiles,
  studentProfiles,
  timeSlots,
  lessons,
  chats,
  overbookingRequests,
  posts,
  notifications
} = loadServerData();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
if (!notifications) {
  notifications = [];
}

// –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
const distPath = path.join(__dirname, '..', 'dist');
console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ dist –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:', distPath);
console.log('üìÅ Dist —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', fs.existsSync(distPath));

if (fs.existsSync(distPath)) {
  console.log('üìÇ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ dist:', fs.readdirSync(distPath));
  app.use(express.static(distPath, {
    maxAge: '1d',
    etag: true,
    lastModified: true
  }));
  console.log('‚úÖ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
} else {
  console.log('‚ö†Ô∏è Dist –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –Ω–µ –±—É–¥—É—Ç –æ–±—Å–ª—É–∂–∏–≤–∞—Ç—å—Å—è');
}

// API endpoints
app.get('/api/teachers', (req, res) => {
  // –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –∏–∑ teacherProfiles
  const teachers = Object.entries(teacherProfiles).map(([id, profile]) => ({
    id,
    name: profile.name || '',
    avatar: profile.avatar || '',
    profile
  }));
  
  res.json(teachers);
});

app.get('/api/users', (req, res) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ server_data.json
    const users = [];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
    Object.entries(teacherProfiles).forEach(([id, profile]) => {
      users.push({
        id,
        email: profile.email || '',
        name: profile.name || '',
        nickname: profile.nickname || '',
        role: 'teacher',
        phone: profile.phone || '',
        profile: profile
      });
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    Object.entries(studentProfiles).forEach(([id, profile]) => {
      users.push({
        id,
        email: profile.email || '',
        name: profile.name || '',
        nickname: profile.nickname || '',
        role: 'student',
        phone: profile.phone || '',
        profile: profile
      });
    });
    
    res.json(users);
  } catch (error) {
    console.error('Error getting users:', error);
    res.status(500).json({ error: 'Failed to get users' });
  }
});

// Endpoint –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/api/updateProfile', (req, res) => {
  try {
    const { userId, profile, role } = req.body;
    
    if (!userId || !profile || !role) {
      return res.status(400).json({ error: 'Missing required fields' });
    }
    
    if (role === 'teacher') {
      teacherProfiles[userId] = { ...teacherProfiles[userId], ...profile };
    } else if (role === 'student') {
      studentProfiles[userId] = { ...studentProfiles[userId], ...profile };
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    saveServerData();
    
    res.json({ success: true, message: 'Profile updated successfully' });
  } catch (error) {
    console.error('Error updating profile:', error);
    res.status(500).json({ error: 'Failed to update profile' });
  }
});

app.post('/api/register', (req, res) => {
  try {
    const { email, password, name, nickname, role, phone } = req.body;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if (!email || !name || !nickname || !role || !phone) {
      return res.status(400).json({ error: 'Missing required fields' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å email –∏ nickname
    const allUsers = [];
    Object.entries(teacherProfiles).forEach(([id, profile]) => {
      allUsers.push({ id, email: profile.email, nickname: profile.nickname });
    });
    Object.entries(studentProfiles).forEach(([id, profile]) => {
      allUsers.push({ id, email: profile.email, nickname: profile.nickname });
    });
    
    const emailExists = allUsers.some(user => user.email === email);
    const nicknameExists = allUsers.some(user => user.nickname === nickname);
    
    if (emailExists) {
      return res.status(400).json({ error: 'User with this email already exists' });
    }
    
    if (nicknameExists) {
      return res.status(400).json({ error: 'User with this nickname already exists' });
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userId = `user_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    const newUser = {
      id: userId,
      email,
      name,
      nickname,
      role,
      phone,
      createdAt: new Date().toISOString()
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
    if (role === 'teacher') {
      teacherProfiles[userId] = {
        ...newUser,
        subjects: [],
        grades: [],
        experience: 'beginner',
        hourlyRate: 0,
        country: '',
        city: '',
        bio: '',
        avatar: '',
        rating: 0,
        lessonsCount: 0,
        studentsCount: 0,
        offlineAvailable: false,
        overbookingEnabled: true
      };
    } else if (role === 'student') {
      studentProfiles[userId] = {
        ...newUser,
        grade: '',
        subjects: [],
        goals: [],
        experience: 'beginner',
        city: '',
        bio: ''
      };
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    saveServerData({
      teacherProfiles,
      studentProfiles,
      timeSlots,
      lessons,
      chats,
      overbookingRequests,
      posts
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
    io.emit('userRegistered', newUser);
    
    // –¢–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    if (role === 'teacher') {
      io.emit('teacherProfiles', teacherProfiles);
    } else if (role === 'student') {
      io.emit('studentProfiles', studentProfiles);
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    io.emit('dataUpdated', {
      type: 'userRegistered',
      timeSlots: timeSlots,
      teacherProfiles: teacherProfiles,
      studentProfiles: studentProfiles
    });
    
    res.status(201).json(newUser);
    
  } catch (error) {
    console.error('Error registering user:', error);
    res.status(500).json({ error: 'Failed to register user' });
  }
});

app.get('/api/users/:id', (req, res) => {
  try {
    const { id } = req.params;
    
    // –ò—â–µ–º –≤ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è—Ö
    if (teacherProfiles[id]) {
      return res.json({
        id,
        email: teacherProfiles[id].email || '',
        name: teacherProfiles[id].name || '',
        nickname: teacherProfiles[id].nickname || '',
        role: 'teacher',
        phone: teacherProfiles[id].phone || '',
        profile: teacherProfiles[id]
      });
    }
    
    // –ò—â–µ–º –≤ —Å—Ç—É–¥–µ–Ω—Ç–∞—Ö
    if (studentProfiles[id]) {
      return res.json({
        id,
        email: studentProfiles[id].email || '',
        name: studentProfiles[id].name || '',
        nickname: studentProfiles[id].nickname || '',
        role: 'student',
        phone: studentProfiles[id].phone || '',
        profile: studentProfiles[id]
      });
    }
    
    res.status(404).json({ error: 'User not found' });
    
  } catch (error) {
    console.error('Error getting user:', error);
    res.status(500).json({ error: 'Failed to get user' });
  }
});

// Endpoint –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
app.post('/api/upload-local-data', (req, res) => {
  try {
    const { teacherProfiles: localTeachers, studentProfiles: localStudents, users: localUsers } = req.body;
    
    console.log('üì§ –ü–æ–ª—É—á–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:');
    console.log(`   üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏: ${Object.keys(localTeachers || {}).length}`);
    console.log(`   üë®‚Äçüéì –°—Ç—É–¥–µ–Ω—Ç—ã: ${Object.keys(localStudents || {}).length}`);
    console.log(`   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${(localUsers || []).length}`);
    
    let uploadedCount = 0;
    let skippedCount = 0;
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
    if (localTeachers && typeof localTeachers === 'object') {
      Object.entries(localTeachers).forEach(([id, profile]) => {
        if (!teacherProfiles[id]) {
          teacherProfiles[id] = profile;
          uploadedCount++;
          console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: ${profile.name || id}`);
        } else {
          skippedCount++;
          console.log(`‚è≠Ô∏è –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${profile.name || id}`);
        }
      });
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    if (localStudents && typeof localStudents === 'object') {
      Object.entries(localStudents).forEach(([id, profile]) => {
        if (!studentProfiles[id]) {
          studentProfiles[id] = profile;
          uploadedCount++;
          console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —Å—Ç—É–¥–µ–Ω—Ç: ${profile.name || id}`);
        } else {
          skippedCount++;
          console.log(`‚è≠Ô∏è –°—Ç—É–¥–µ–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${profile.name || id}`);
        }
      });
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    saveServerData({
      teacherProfiles,
      studentProfiles,
      timeSlots,
      lessons,
      chats,
      overbookingRequests,
      posts
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
    io.emit('dataUpdated', {
      type: 'localDataUploaded',
      timeSlots: timeSlots,
      teacherProfiles: teacherProfiles,
      studentProfiles: studentProfiles
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏
    io.emit('teacherProfiles', teacherProfiles);
    io.emit('studentProfiles', studentProfiles);
    
    console.log(`üéâ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${uploadedCount} –Ω–æ–≤—ã—Ö, ${skippedCount} –ø—Ä–æ–ø—É—â–µ–Ω–æ`);
    
    res.json({
      success: true,
      message: '–õ–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä',
      uploaded: uploadedCount,
      skipped: skippedCount,
      totalTeachers: Object.keys(teacherProfiles).length,
      totalStudents: Object.keys(studentProfiles).length
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
    res.status(500).json({ 
      error: 'Failed to upload local data',
      details: error.message 
    });
  }
});

// API endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞
app.get('/api/status', (req, res) => {
  res.json({ 
    message: 'Nauchi API Server',
    status: 'running',
    connectedClients: io.engine.clientsCount,
    timeSlots: timeSlots.length,
    lessons: lessons.length,
    teachers: Object.keys(teacherProfiles).length,
    students: Object.keys(studentProfiles).length
  });
});

// Health check endpoint
app.get('/health', (req, res) => {
  res.json({ 
    status: 'healthy',
    timestamp: new Date().toISOString(),
    uptime: process.uptime()
  });
});

// API health check endpoint for Render
app.get('/api/health', (req, res) => {
  res.json({ 
    status: 'ok',
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    version: '1.0.0',
    socketConnections: io.engine.clientsCount,
    transports: io.engine.clientsCount > 0 ? Object.keys(io.engine.clients) : []
  });
});

// Socket.IO connection test endpoint
app.get('/api/socket-test', (req, res) => {
  res.json({
    status: 'socket_available',
    connections: io.engine.clientsCount,
    transports: ['websocket', 'polling'],
    cors: {
      allowedOrigins: allowedOrigins,
      currentOrigin: req.headers.origin || 'unknown'
    }
  });
});

// API endpoint –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
app.get('/api/sync', (req, res) => {
  try {
    const syncData = {
      timeSlots: timeSlots,
      lessons: lessons,
      chats: chats,
      posts: posts,
      teacherProfiles: teacherProfiles,
      studentProfiles: studentProfiles,
      overbookingRequests: overbookingRequests || []
    };
    
    res.json(syncData);
  } catch (error) {
    console.error('Error in /api/sync:', error);
    res.status(500).json({ error: 'Failed to sync data' });
  }
});

// Root endpoint for service verification
app.get('/', (req, res) => {
  res.json({ 
    message: 'Nauchi API Server',
    status: 'running',
    note: 'API server is operational',
    connectedClients: io.engine.clientsCount,
    timeSlots: timeSlots.length,
    lessons: lessons.length,
    teachers: Object.keys(teacherProfiles).length,
    students: Object.keys(studentProfiles).length,
    health: '/health',
    apiHealth: '/api/health'
  });
});

// Fallback –¥–ª—è SPA - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º
if (fs.existsSync(distPath)) {
  app.get('*', (req, res) => {
    const indexPath = path.join(distPath, 'index.html');
    console.log('üîÑ SPA fallback –¥–ª—è:', req.path, '->', indexPath);
    
    if (fs.existsSync(indexPath)) {
      res.sendFile(indexPath);
    } else {
      console.log('‚ùå index.html –Ω–µ –Ω–∞–π–¥–µ–Ω –≤:', indexPath);
      res.status(404).json({ 
        error: 'Frontend not built', 
        path: req.path,
        distPath: distPath,
        files: fs.existsSync(distPath) ? fs.readdirSync(distPath) : 'dist not found'
      });
    }
  });
} else {
  // –ï—Å–ª–∏ dist –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
  app.get('*', (req, res) => {
    res.status(503).json({ 
      error: 'Frontend not built', 
      message: 'Please run npm run build first',
      distPath: distPath,
      exists: fs.existsSync(distPath)
    });
  });
}

// WebSocket –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
io.on('connection', (socket) => {
  console.log(`üîå –ù–æ–≤–æ–µ Socket.IO –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: ${socket.id}`);
  console.log(`üìä –í—Å–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: ${io.engine.clientsCount}`);
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –Ω–æ–≤–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
  socket.emit('teacherProfiles', teacherProfiles);
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –Ω–æ–≤–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
  socket.emit('studentProfiles', studentProfiles);
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  socket.emit('connectionStatus', { 
    status: 'connected', 
    socketId: socket.id,
    timestamp: new Date().toISOString()
  });
  
  socket.on('disconnect', () => {
    console.log(`üîå Socket.IO –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ: ${socket.id}`);
    console.log(`üìä –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: ${io.engine.clientsCount}`);
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  socket.on('userRegistered', (user) => {
    io.emit('userRegistered', user);
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è —É—á–µ–Ω–∏–∫–∞
  socket.on('updateStudentProfile', (data) => {
    // data: { studentId, profile }
    if (data && data.studentId && data.profile) {
      studentProfiles[data.studentId] = data.profile;
      saveServerData(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
      // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
      io.emit('profileUpdated', { type: 'student', userId: data.studentId, profile: data.profile });
      // –°—Ç–∞—Ä–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      io.emit('studentProfileUpdated', { studentId: data.studentId, profile: data.profile });
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–µ–∂–¥—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
      const userData = {
        id: data.studentId,
        email: data.profile.email || '',
        name: data.profile.name || '',
        nickname: data.profile.nickname || '',
        role: 'student',
        phone: data.profile.phone || '',
        createdAt: data.profile.createdAt || new Date().toISOString()
      };
      io.emit('userRegistered', userData);
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
  socket.on('updateTeacherProfile', (data) => {
    // data: { teacherId, profile }
    if (data && data.teacherId && data.profile) {
      teacherProfiles[data.teacherId] = data.profile;
      saveServerData(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
      // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
      io.emit('profileUpdated', { type: 'teacher', userId: data.teacherId, profile: data.profile });
      // –°—Ç–∞—Ä–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      io.emit('teacherProfileUpdated', { teacherId: data.teacherId, profile: data.profile });
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–µ–∂–¥—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
      const userData = {
        id: data.teacherId,
        email: data.profile.email || '',
        name: data.profile.name || '',
        nickname: data.profile.nickname || '',
        role: 'teacher',
        phone: data.profile.phone || '',
        createdAt: data.profile.createdAt || new Date().toISOString()
      };
      io.emit('userRegistered', userData);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      io.emit('dataUpdated', {
        type: 'teacherProfileUpdated',
        timeSlots: timeSlots,
        teacherProfiles: teacherProfiles,
        studentProfiles: studentProfiles
      });
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–ª–æ—Ç–∞
  socket.on('createSlot', (newSlot) => {
    console.log('Creating new slot:', newSlot);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Å–ª–æ—Ç —Å —Ç–∞–∫–∏–º ID
    const existingSlotIndex = timeSlots.findIndex(slot => slot.id === newSlot.id);
    if (existingSlotIndex !== -1) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–ª–æ—Ç
      timeSlots[existingSlotIndex] = { ...timeSlots[existingSlotIndex], ...newSlot };
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Å–ª–æ—Ç
      timeSlots.push(newSlot);
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
    saveServerData();
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Å–ª–æ—Ç –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
    io.emit('slotCreated', newSlot);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    io.emit('dataUpdated', {
      type: 'slotCreated',
      timeSlots: timeSlots,
      teacherProfiles: teacherProfiles,
      studentProfiles: studentProfiles
    });
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ—Ç–∞
  socket.on('bookSlot', (data) => {
    const { slotId, lesson, bookedStudentId } = data;
    console.log('Booking slot:', data);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–ª–æ—Ç–∞ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º bookedStudentId
    const slotIndex = timeSlots.findIndex(slot => slot.id === slotId);
    if (slotIndex !== -1) {
      timeSlots[slotIndex].isBooked = true;
      timeSlots[slotIndex].bookedStudentId = bookedStudentId || lesson.studentId;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —É—Ä–æ–∫
    lessons.push(lesson);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
    saveServerData();
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
    io.emit('slotBooked', data);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    io.emit('dataUpdated', {
      type: 'slotBooked',
      timeSlots: timeSlots,
      lessons: lessons,
      teacherProfiles: teacherProfiles,
      studentProfiles: studentProfiles
    });
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  socket.on('cancelSlot', (data) => {
    const { slotId, lessonId } = data;
    console.log('Cancelling slot:', data);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–ª–æ—Ç–∞ –∏ –æ—á–∏—â–∞–µ–º bookedStudentId
    const slotIndex = timeSlots.findIndex(slot => slot.id === slotId);
    if (slotIndex !== -1) {
      timeSlots[slotIndex].isBooked = false;
      timeSlots[slotIndex].bookedStudentId = undefined;
    }
    
    // –£–¥–∞–ª—è–µ–º —É—Ä–æ–∫
    const lessonIndex = lessons.findIndex(lesson => lesson.id === lessonId);
    if (lessonIndex !== -1) {
      lessons.splice(lessonIndex, 1);
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
    saveServerData();
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
    io.emit('slotCancelled', data);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    io.emit('dataUpdated', {
      type: 'slotCancelled',
      timeSlots: timeSlots,
      lessons: lessons,
      teacherProfiles: teacherProfiles,
      studentProfiles: studentProfiles
    });
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ—Ç–∞
  socket.on('deleteSlot', (data) => {
    const { slotId } = data;
    console.log('Deleting slot:', slotId);
    
    // –£–¥–∞–ª—è–µ–º —Å–ª–æ—Ç
    const slotIndex = timeSlots.findIndex(slot => slot.id === slotId);
    if (slotIndex !== -1) {
      timeSlots.splice(slotIndex, 1);
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
    saveServerData();
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
    io.emit('slotDeleted', { slotId });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    io.emit('dataUpdated', {
      type: 'slotDeleted',
      timeSlots: timeSlots,
      teacherProfiles: teacherProfiles,
      studentProfiles: studentProfiles
    });
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–∫–∞
  socket.on('lessonCompleted', (data) => {
    const { lessonId } = data;
    console.log('Completing lesson:', lessonId);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É—Ä–æ–∫–∞
    const lessonIndex = lessons.findIndex(lesson => lesson.id === lessonId);
    if (lessonIndex !== -1) {
      lessons[lessonIndex].status = 'completed';
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
    saveServerData();
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
    io.emit('lessonCompleted', { lessonId });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    io.emit('dataUpdated', {
      type: 'lessonCompleted',
      timeSlots: timeSlots,
      lessons: lessons,
      teacherProfiles: teacherProfiles,
      studentProfiles: studentProfiles
    });
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤—Å–µ—Ö —Å–ª–æ—Ç–æ–≤
  socket.on('requestAllSlots', () => {
    console.log('Sending all slots to client');
    socket.emit('allSlots', timeSlots);
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤—Å–µ—Ö —É—Ä–æ–∫–æ–≤
  socket.on('requestAllLessons', () => {
    console.log('Sending all lessons to client');
    socket.emit('allLessons', lessons);
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  socket.on('ping', () => {
    socket.emit('pong', { 
      timestamp: new Date().toISOString(),
      serverTime: Date.now()
    });
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
  socket.on('getServerStatus', () => {
    socket.emit('serverStatus', {
      status: 'online',
      timestamp: new Date().toISOString(),
      uptime: process.uptime(),
      connections: io.engine.clientsCount,
      dataStats: {
        teachers: Object.keys(teacherProfiles).length,
        students: Object.keys(studentProfiles).length,
        slots: timeSlots.length,
        lessons: lessons.length
      }
    });
  });

  // ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ß–ê–¢–û–í =====
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
  socket.on('createChat', (newChat) => {
    console.log('Creating new chat:', newChat.id);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —á–∞—Ç
    const existingChat = chats.find(chat => 
      chat.participants.includes(newChat.participants[0]) && 
      chat.participants.includes(newChat.participants[1])
    );
    
    if (existingChat) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ
      io.emit('chatCreated', existingChat);
      return;
    }
    
    chats.push(newChat);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    saveServerData();
    
    console.log(`New chat created: ${newChat.id} between ${newChat.participantNames.join(' and ')}`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —á–∞—Ç –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
    io.emit('chatCreated', newChat);
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ
  socket.on('sendMessage', (data) => {
    const { chatId, message } = data;
    
    // –ù–∞—Ö–æ–¥–∏–º —á–∞—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const chatIndex = chats.findIndex(chat => chat.id === chatId);
    if (chatIndex !== -1) {
      chats[chatIndex].messages.push(message);
      chats[chatIndex].lastMessage = message;
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
      saveServerData();
      
      console.log(`Message saved to chat ${chatId}:`, message.content);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
      io.emit('receiveMessage', data);
      
      // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å
      if (message.receiverId && message.receiverId !== message.senderId) {
        const notification = {
          id: `notification_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
          userId: message.receiverId,
          type: 'new_message',
          title: '–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
          message: `${message.senderName} –Ω–∞–ø–∏—Å–∞–ª –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ`,
          data: {
            chatId: chatId,
            senderId: message.senderId,
            senderName: message.senderName,
            messageId: message.id
          },
          isRead: false,
          timestamp: new Date().toISOString()
        };
        
        if (notifications) {
          notifications.push(notification);
          saveServerData();
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          io.to(`notifications_${message.receiverId}`).emit('newNotification', notification);
        }
      }
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  socket.on('createNotification', (notification) => {
    console.log('createNotification event received:', notification);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –º–∞—Å—Å–∏–≤
    if (notifications) {
      notifications.push(notification);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
      saveServerData();
      
      console.log(`Notification created: ${notification.id} for user ${notification.userId}`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      io.to(`notifications_${notification.userId}`).emit('newNotification', notification);
      
      console.log(`Notification sent to user ${notification.userId}`);
    } else {
      console.error('Notifications array is not initialized');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–∞
  socket.on('deleteChat', (data) => {
    const { chatId } = data;
    const chatIndex = chats.findIndex(chat => chat.id === chatId);
    if (chatIndex !== -1) {
      chats.splice(chatIndex, 1);
      saveServerData();
      io.emit('chatDeleted', { chatId });
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —á–∞—Ç–∞ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ
  socket.on('markChatAsRead', (data) => {
    const { chatId } = data;
    const chat = chats.find(chat => chat.id === chatId);
    if (chat) {
      chat.messages.forEach(message => {
        message.isRead = true;
      });
      saveServerData();
      io.emit('chatMarkedAsRead', { chatId });
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
  socket.on('clearChatMessages', (data) => {
    const { chatId } = data;
    const chat = chats.find(chat => chat.id === chatId);
    if (chat) {
      chat.messages = [];
      saveServerData();
      io.emit('chatMessagesCleared', { chatId });
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è —á–∞—Ç–∞
  socket.on('archiveChat', (data) => {
    const { chatId } = data;
    const chat = chats.find(chat => chat.id === chatId);
    if (chat) {
      chat.archived = true;
      saveServerData();
      io.emit('chatArchived', { chatId });
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞ –∏–∑ –∞—Ä—Ö–∏–≤–∞
  socket.on('unarchiveChat', (data) => {
    const { chatId } = data;
    const chat = chats.find(chat => chat.id === chatId);
    if (chat) {
      chat.archived = false;
      saveServerData();
      io.emit('chatUnarchived', { chatId });
    }
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 10000;
const HOST = process.env.HOST || '0.0.0.0';

server.listen(PORT, HOST, () => {
  console.log(`üöÄ Nauchi API server running on port ${PORT}`);
  console.log(`üì° Environment: ${process.env.NODE_ENV || 'development'}`);
  console.log(`üåê Health check available at: http://${HOST}:${PORT}/api/health`);
  console.log(`üîç Root endpoint: http://${HOST}:${PORT}/`);
  console.log(`üìÅ Dist path: ${distPath} (exists: ${fs.existsSync(distPath)})`);
  console.log(`üîå Socket.IO server ready with CORS origins: ${allowedOrigins.join(', ')}`);
  console.log(`üåç CORS enabled for: ${allowedOrigins.filter(o => o.includes('onrender.com')).join(', ')}`);
});