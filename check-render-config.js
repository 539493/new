#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è Render...\n');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º package.json
console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ package.json...');
try {
  const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
  
  const requiredScripts = ['render:build', 'render:start'];
  const missingScripts = requiredScripts.filter(script => !packageJson.scripts[script]);
  
  if (missingScripts.length === 0) {
    console.log('‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –Ω–∞–π–¥–µ–Ω—ã');
    console.log(`   - render:build: ${packageJson.scripts['render:build']}`);
    console.log(`   - render:start: ${packageJson.scripts['render:start']}`);
  } else {
    console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–∫—Ä–∏–ø—Ç—ã:', missingScripts.join(', '));
  }
} catch (error) {
  console.log('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è package.json:', error.message);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º render.yaml
console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ render.yaml...');
try {
  const renderYaml = fs.readFileSync('render.yaml', 'utf8');
  
  const requiredConfigs = [
    'buildCommand: npm run render:build',
    'startCommand: npm run render:start',
    'healthCheckPath: /api/health',
    'PORT: 10000'
  ];
  
  const missingConfigs = requiredConfigs.filter(config => !renderYaml.includes(config));
  
  if (missingConfigs.length === 0) {
    console.log('‚úÖ render.yaml –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
  } else {
    console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', missingConfigs.join(', '));
  }
} catch (error) {
  console.log('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è render.yaml:', error.message);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º production —Å–µ—Ä–≤–µ—Ä
console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ production —Å–µ—Ä–≤–µ—Ä–∞...');
try {
  const productionServer = fs.readFileSync('backend/production-server.cjs', 'utf8');
  
  const requiredFeatures = [
    'process.env.PORT || 10000',
    '/api/health',
    'express.static',
    'Socket.IO'
  ];
  
  const missingFeatures = requiredFeatures.filter(feature => !productionServer.includes(feature));
  
  if (missingFeatures.length === 0) {
    console.log('‚úÖ Production —Å–µ—Ä–≤–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
  } else {
    console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ—É–Ω–∫—Ü–∏–∏:', missingFeatures.join(', '));
  }
} catch (error) {
  console.log('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è production-server.cjs:', error.message);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
console.log('\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...');
const requiredFiles = [
  'package.json',
  'render.yaml',
  'backend/production-server.cjs',
  'src/main.tsx',
  'vite.config.ts'
];

const missingFiles = requiredFiles.filter(file => !fs.existsSync(file));

if (missingFiles.length === 0) {
  console.log('‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã');
} else {
  console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã:', missingFiles.join(', '));
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
console.log('\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...');
try {
  const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
  const requiredDeps = ['express', 'socket.io', 'cors', 'react', 'vite'];
  
  const missingDeps = requiredDeps.filter(dep => 
    !packageJson.dependencies[dep] && !packageJson.devDependencies[dep]
  );
  
  if (missingDeps.length === 0) {
    console.log('‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
  } else {
    console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:', missingDeps.join(', '));
  }
} catch (error) {
  console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:', error.message);
}

console.log('\nüéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
console.log('1. git add .');
console.log('2. git commit -m "Configure for Render deployment"');
console.log('3. git push origin main');
console.log('4. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π Web Service –Ω–∞ render.com');
console.log('5. –ü–æ–¥–∫–ª—é—á–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–µ–ø–ª–æ–π');

