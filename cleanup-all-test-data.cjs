// –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å Render —Å–µ—Ä–≤–µ—Ä–∞
const https = require('https');

const RENDER_URL = 'https://nauchi.onrender.com';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
const makeRequest = (path, method = 'GET', data = null) => {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'nauchi.onrender.com',
      port: 443,
      path: path,
      method: method,
      headers: {
        'Content-Type': 'application/json',
        'User-Agent': 'Cleanup-Script/1.0'
      }
    };

    const req = https.request(options, (res) => {
      let responseData = '';
      
      res.on('data', (chunk) => {
        responseData += chunk;
      });
      
      res.on('end', () => {
        try {
          const parsed = JSON.parse(responseData);
          resolve({ status: res.statusCode, data: parsed });
        } catch (e) {
          resolve({ status: res.statusCode, data: responseData });
        }
      });
    });

    req.on('error', (err) => {
      reject(err);
    });

    if (data) {
      req.write(JSON.stringify(data));
    }
    
    req.end();
  });
};

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
const getAllData = async () => {
  try {
    console.log('üìä –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞...\n');
    
    const [users, timeSlots, teacherProfiles] = await Promise.all([
      makeRequest('/api/users'),
      makeRequest('/api/time-slots'),
      makeRequest('/api/teacher-profiles')
    ]);
    
    return {
      users: users.status === 200 ? users.data : [],
      timeSlots: timeSlots.status === 200 ? timeSlots.data : [],
      teacherProfiles: teacherProfiles.status === 200 ? teacherProfiles.data : []
    };
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: ${error.message}`);
    return { users: [], timeSlots: [], teacherProfiles: [] };
  }
};

// –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const isTestData = (item, type) => {
  const testPatterns = [
    /test/i,
    /demo/i,
    /example/i,
    /sample/i,
    /temp/i,
    /temporary/i,
    /123/i,
    /admin/i,
    /root/i
  ];
  
  let textToCheck = '';
  
  switch (type) {
    case 'user':
      textToCheck = `${item.name || ''} ${item.email || ''} ${item.username || ''}`;
      break;
    case 'profile':
      textToCheck = `${item.name || ''} ${item.bio || ''} ${item.subjects || ''}`;
      break;
    case 'slot':
      textToCheck = `${item.teacherId || ''} ${item.subject || ''}`;
      break;
  }
  
  return testPatterns.some(pattern => pattern.test(textToCheck));
};

// –£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç
const deleteItem = async (path, id, type) => {
  try {
    const response = await makeRequest(`${path}/${id}`, 'DELETE');
    
    if (response.status === 200) {
      console.log(`‚úÖ ${type} ${id} —É–¥–∞–ª–µ–Ω`);
      return true;
    } else {
      console.log(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è ${type} ${id}: ${response.status}`);
      return false;
    }
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è ${type} ${id}: ${error.message}`);
    return false;
  }
};

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏
const cleanupAllTestData = async () => {
  console.log('üßπ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...\n');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    const data = await getAllData();
    
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö:');
    console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${data.users.length}`);
    console.log(`‚è∞ –°–ª–æ—Ç—ã –≤—Ä–µ–º–µ–Ω–∏: ${data.timeSlots.length}`);
    console.log(`üë®‚Äçüè´ –ü—Ä–æ—Ñ–∏–ª–∏ —É—á–∏—Ç–µ–ª–µ–π: ${data.teacherProfiles.length}\n`);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('üë• –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
    data.users.forEach((user, index) => {
      const isTest = isTestData(user, 'user');
      console.log(`${index + 1}. ID: ${user.id}, –ò–º—è: ${user.name || 'N/A'}, Email: ${user.email || 'N/A'}, –†–æ–ª—å: ${user.role || 'N/A'} ${isTest ? 'üß™ –¢–ï–°–¢' : '‚úÖ'}`);
    });
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ —É—á–∏—Ç–µ–ª–µ–π
    console.log('\nüë®‚Äçüè´ –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª–µ–π —É—á–∏—Ç–µ–ª–µ–π:');
    data.teacherProfiles.forEach((profile, index) => {
      const isTest = isTestData(profile, 'profile');
      console.log(`${index + 1}. ID: ${profile.id}, –ò–º—è: ${profile.name || 'N/A'}, –ü—Ä–µ–¥–º–µ—Ç—ã: ${profile.subjects || 'N/A'} ${isTest ? 'üß™ –¢–ï–°–¢' : '‚úÖ'}`);
    });
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –≤—Ä–µ–º–µ–Ω–∏
    console.log('\n‚è∞ –ê–Ω–∞–ª–∏–∑ —Å–ª–æ—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–∏:');
    data.timeSlots.forEach((slot, index) => {
      const isTest = isTestData(slot, 'slot');
      console.log(`${index + 1}. ID: ${slot.id}, –£—á–∏—Ç–µ–ª—å: ${slot.teacherId}, –ü—Ä–µ–¥–º–µ—Ç: ${slot.subject || 'N/A'}, –í—Ä–µ–º—è: ${slot.startTime || 'N/A'} ${isTest ? 'üß™ –¢–ï–°–¢' : '‚úÖ'}`);
    });
    
    // –ù–∞—Ö–æ–¥–∏–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    const testUsers = data.users.filter(user => isTestData(user, 'user'));
    const testProfiles = data.teacherProfiles.filter(profile => isTestData(profile, 'profile'));
    const testSlots = data.timeSlots.filter(slot => isTestData(slot, 'slot'));
    
    console.log(`\nüîç –ù–∞–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:`);
    console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${testUsers.length}`);
    console.log(`üë®‚Äçüè´ –ü—Ä–æ—Ñ–∏–ª–∏: ${testProfiles.length}`);
    console.log(`‚è∞ –°–ª–æ—Ç—ã: ${testSlots.length}`);
    
    if (testUsers.length === 0 && testProfiles.length === 0 && testSlots.length === 0) {
      console.log('\n‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
      return;
    }
    
    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    console.log('\nüóëÔ∏è  –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...');
    
    let deletedCount = 0;
    
    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–ª–æ—Ç—ã
    for (const slot of testSlots) {
      const success = await deleteItem('/api/time-slots', slot.id, '–°–ª–æ—Ç');
      if (success) deletedCount++;
      await new Promise(resolve => setTimeout(resolve, 300));
    }
    
    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏
    for (const profile of testProfiles) {
      const success = await deleteItem('/api/teacher-profiles', profile.id, '–ü—Ä–æ—Ñ–∏–ª—å');
      if (success) deletedCount++;
      await new Promise(resolve => setTimeout(resolve, 300));
    }
    
    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for (const user of testUsers) {
      const success = await deleteItem('/api/users', user.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
      if (success) deletedCount++;
      await new Promise(resolve => setTimeout(resolve, 300));
    }
    
    console.log(`\n‚úÖ –£–¥–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${deletedCount}`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const finalData = await getAllData();
    console.log('\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${finalData.users.length}`);
    console.log(`‚è∞ –°–ª–æ—Ç—ã –≤—Ä–µ–º–µ–Ω–∏: ${finalData.timeSlots.length}`);
    console.log(`üë®‚Äçüè´ –ü—Ä–æ—Ñ–∏–ª–∏ —É—á–∏—Ç–µ–ª–µ–π: ${finalData.teacherProfiles.length}`);
    
  } catch (error) {
    console.log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
  }
};

// –ó–∞–ø—É—Å–∫
cleanupAllTestData();
